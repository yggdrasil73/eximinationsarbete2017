
Lab2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000810e4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20070438  0008151c  00010438  2**2
                  ALLOC
  3 .stack        00002004  200704c4  000815a8  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ace0  00000000  00000000  000104d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020cf  00000000  00000000  0001b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003326  00000000  00000000  0001d281  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008b8  00000000  00000000  000205a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000758  00000000  00000000  00020e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000161c4  00000000  00000000  000215b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc15  00000000  00000000  0003777b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005eb46  00000000  00000000  00044390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000108c  00000000  00000000  000a2ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200724c8 	.word	0x200724c8
   80004:	00080bc1 	.word	0x00080bc1
   80008:	00080bbd 	.word	0x00080bbd
   8000c:	00080bbd 	.word	0x00080bbd
   80010:	00080bbd 	.word	0x00080bbd
   80014:	00080bbd 	.word	0x00080bbd
   80018:	00080bbd 	.word	0x00080bbd
	...
   8002c:	00080bbd 	.word	0x00080bbd
   80030:	00080bbd 	.word	0x00080bbd
   80034:	00000000 	.word	0x00000000
   80038:	00080bbd 	.word	0x00080bbd
   8003c:	00080bbd 	.word	0x00080bbd
   80040:	00080bbd 	.word	0x00080bbd
   80044:	00080bbd 	.word	0x00080bbd
   80048:	00080bbd 	.word	0x00080bbd
   8004c:	00080bbd 	.word	0x00080bbd
   80050:	00080bbd 	.word	0x00080bbd
   80054:	00080bbd 	.word	0x00080bbd
   80058:	00080bbd 	.word	0x00080bbd
   8005c:	00080bbd 	.word	0x00080bbd
   80060:	00080bbd 	.word	0x00080bbd
   80064:	00080bbd 	.word	0x00080bbd
   80068:	00000000 	.word	0x00000000
   8006c:	00080989 	.word	0x00080989
   80070:	000809a5 	.word	0x000809a5
   80074:	000809c1 	.word	0x000809c1
   80078:	000809dd 	.word	0x000809dd
	...
   80084:	00080bbd 	.word	0x00080bbd
   80088:	00080bbd 	.word	0x00080bbd
   8008c:	00080bbd 	.word	0x00080bbd
   80090:	00080bbd 	.word	0x00080bbd
   80094:	00080bbd 	.word	0x00080bbd
   80098:	00080bbd 	.word	0x00080bbd
   8009c:	00080bbd 	.word	0x00080bbd
   800a0:	00080bbd 	.word	0x00080bbd
   800a4:	00000000 	.word	0x00000000
   800a8:	00080bbd 	.word	0x00080bbd
   800ac:	0008032d 	.word	0x0008032d
   800b0:	00080bbd 	.word	0x00080bbd
   800b4:	00080bbd 	.word	0x00080bbd
   800b8:	00080bbd 	.word	0x00080bbd
   800bc:	00080bbd 	.word	0x00080bbd
   800c0:	00080bbd 	.word	0x00080bbd
   800c4:	00080bbd 	.word	0x00080bbd
   800c8:	00080bbd 	.word	0x00080bbd
   800cc:	00080bbd 	.word	0x00080bbd
   800d0:	00080bbd 	.word	0x00080bbd
   800d4:	00080bbd 	.word	0x00080bbd
   800d8:	00080bbd 	.word	0x00080bbd
   800dc:	00080bbd 	.word	0x00080bbd
   800e0:	00080bbd 	.word	0x00080bbd
   800e4:	00080bbd 	.word	0x00080bbd
   800e8:	00080bbd 	.word	0x00080bbd
   800ec:	00080bbd 	.word	0x00080bbd
   800f0:	00080bbd 	.word	0x00080bbd

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000810e4 	.word	0x000810e4
   80110:	000810e7 	.word	0x000810e7
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000810e4 	.word	0x000810e4
   8013c:	000810e4 	.word	0x000810e4
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070438 	.word	0x20070438
   80164:	00000000 	.word	0x00000000
   80168:	000810e4 	.word	0x000810e4

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000810e4 	.word	0x000810e4
   80198:	2007043c 	.word	0x2007043c
   8019c:	000810e4 	.word	0x000810e4
   801a0:	00000000 	.word	0x00000000

000801a4 <adc_setup>:
#include <asf.h>
#include "adcdac.h"


void adc_setup()
{
   801a4:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   801a6:	f04f 0025 	mov.w	r0, #37	; 0x25
   801aa:	f640 3339 	movw	r3, #2873	; 0xb39
   801ae:	f2c0 0308 	movt	r3, #8
   801b2:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		//Configure for maximum frequency @ 84 MHz, CHECK THIS!!
   801b4:	f04f 0400 	mov.w	r4, #0
   801b8:	f2c4 040c 	movt	r4, #16396	; 0x400c
   801bc:	4620      	mov	r0, r4
   801be:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
   801c2:	f6c0 2103 	movt	r1, #2563	; 0xa03
   801c6:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
   801ca:	f2c0 1231 	movt	r2, #305	; 0x131
   801ce:	f04f 0300 	mov.w	r3, #0
   801d2:	f240 2591 	movw	r5, #657	; 0x291
   801d6:	f2c0 0508 	movt	r5, #8
   801da:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   801dc:	4620      	mov	r0, r4
   801de:	f04f 0100 	mov.w	r1, #0
   801e2:	460a      	mov	r2, r1
   801e4:	460b      	mov	r3, r1
   801e6:	f240 25f1 	movw	r5, #753	; 0x2f1
   801ea:	f2c0 0508 	movt	r5, #8
   801ee:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   801f0:	4620      	mov	r0, r4
   801f2:	f04f 0100 	mov.w	r1, #0
   801f6:	f240 22d1 	movw	r2, #721	; 0x2d1
   801fa:	f2c0 0208 	movt	r2, #8
   801fe:	4790      	blx	r2
	adc_enable_channel(ADC, ADC_CHANNEL_10);				//PB17 - AD8 for Arduino
   80200:	4620      	mov	r0, r4
   80202:	f04f 010a 	mov.w	r1, #10
   80206:	f240 3319 	movw	r3, #793	; 0x319
   8020a:	f2c0 0308 	movt	r3, #8
   8020e:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);			//trigg just by software
   80210:	4620      	mov	r0, r4
   80212:	f04f 0100 	mov.w	r1, #0
   80216:	460a      	mov	r2, r1
   80218:	f240 23e1 	movw	r3, #737	; 0x2e1
   8021c:	f2c0 0308 	movt	r3, #8
   80220:	4798      	blx	r3
   80222:	bd38      	pop	{r3, r4, r5, pc}

00080224 <dac_setup>:
}




void dac_setup() {
   80224:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
   80226:	f04f 0026 	mov.w	r0, #38	; 0x26
   8022a:	f640 3339 	movw	r3, #2873	; 0xb39
   8022e:	f2c0 0308 	movt	r3, #8
   80232:	4798      	blx	r3
	dacc_reset(DACC);
   80234:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   80238:	f2c4 040c 	movt	r4, #16396	; 0x400c
   8023c:	4620      	mov	r0, r4
   8023e:	f240 31bd 	movw	r1, #957	; 0x3bd
   80242:	f2c0 0108 	movt	r1, #8
   80246:	4788      	blx	r1
	dacc_set_transfer_mode(DACC, 0);
   80248:	4620      	mov	r0, r4
   8024a:	f04f 0100 	mov.w	r1, #0
   8024e:	f240 32c5 	movw	r2, #965	; 0x3c5
   80252:	f2c0 0208 	movt	r2, #8
   80256:	4790      	blx	r2
	dacc_set_timing(DACC,1,1,0);			//1 is shortest refresh period, 1 max. speed, 0 startup time
   80258:	4620      	mov	r0, r4
   8025a:	f04f 0101 	mov.w	r1, #1
   8025e:	460a      	mov	r2, r1
   80260:	f04f 0300 	mov.w	r3, #0
   80264:	f240 4501 	movw	r5, #1025	; 0x401
   80268:	f2c0 0508 	movt	r5, #8
   8026c:	47a8      	blx	r5
	
	dacc_set_channel_selection(DACC,0);		//Channel DAC0
   8026e:	4620      	mov	r0, r4
   80270:	f04f 0100 	mov.w	r1, #0
   80274:	f240 33e5 	movw	r3, #997	; 0x3e5
   80278:	f2c0 0308 	movt	r3, #8
   8027c:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);			//enable DAC0
   8027e:	4620      	mov	r0, r4
   80280:	f04f 0100 	mov.w	r1, #0
   80284:	f240 4235 	movw	r2, #1077	; 0x435
   80288:	f2c0 0208 	movt	r2, #8
   8028c:	4790      	blx	r2
   8028e:	bd38      	pop	{r3, r4, r5, pc}

00080290 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80290:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80292:	f04f 0401 	mov.w	r4, #1
   80296:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80298:	f04f 0400 	mov.w	r4, #0
   8029c:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8029e:	f240 2502 	movw	r5, #514	; 0x202
   802a2:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   802a6:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   802aa:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802ae:	6845      	ldr	r5, [r0, #4]
   802b0:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   802b2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   802b6:	fbb1 f1f2 	udiv	r1, r1, r2
   802ba:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802be:	ea4f 6102 	mov.w	r1, r2, lsl #24
   802c2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
   802c6:	6043      	str	r3, [r0, #4]
	return 0;
}
   802c8:	4620      	mov	r0, r4
   802ca:	bc30      	pop	{r4, r5}
   802cc:	4770      	bx	lr
   802ce:	bf00      	nop

000802d0 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   802d0:	6843      	ldr	r3, [r0, #4]
   802d2:	ea4f 1101 	mov.w	r1, r1, lsl #4
   802d6:	f001 0210 	and.w	r2, r1, #16
   802da:	4313      	orrs	r3, r2
   802dc:	6043      	str	r3, [r0, #4]
   802de:	4770      	bx	lr

000802e0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   802e0:	6843      	ldr	r3, [r0, #4]
   802e2:	4319      	orrs	r1, r3
   802e4:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   802e8:	b2d3      	uxtb	r3, r2
   802ea:	4319      	orrs	r1, r3
   802ec:	6041      	str	r1, [r0, #4]
   802ee:	4770      	bx	lr

000802f0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   802f0:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802f2:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   802f4:	4322      	orrs	r2, r4
   802f6:	ea4f 6101 	mov.w	r1, r1, lsl #24
   802fa:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   802fe:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80300:	ea4f 7303 	mov.w	r3, r3, lsl #28
   80304:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
   80308:	430a      	orrs	r2, r1
   8030a:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8030c:	bc10      	pop	{r4}
   8030e:	4770      	bx	lr

00080310 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80310:	f04f 0302 	mov.w	r3, #2
   80314:	6003      	str	r3, [r0, #0]
   80316:	4770      	bx	lr

00080318 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80318:	f04f 0301 	mov.w	r3, #1
   8031c:	fa03 f101 	lsl.w	r1, r3, r1
   80320:	6101      	str	r1, [r0, #16]
   80322:	4770      	bx	lr

00080324 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80324:	6a00      	ldr	r0, [r0, #32]
}
   80326:	4770      	bx	lr

00080328 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80328:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   8032a:	4770      	bx	lr

0008032c <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   8032c:	b530      	push	{r4, r5, lr}
   8032e:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;
	uint32_t invalue, outvalue;


	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);			//The compare bit is cleared by reading the register, manual p. 915
   80330:	f04f 0000 	mov.w	r0, #0
   80334:	f2c4 0008 	movt	r0, #16392	; 0x4008
   80338:	f04f 0100 	mov.w	r1, #0
   8033c:	f240 4389 	movw	r3, #1161	; 0x489
   80340:	f2c0 0308 	movt	r3, #8
   80344:	4798      	blx	r3
   80346:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   80348:	9b01      	ldr	r3, [sp, #4]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8034a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8034e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80352:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80356:	6302      	str	r2, [r0, #48]	; 0x30
	
	ioport_set_pin_level(CHECK_PIN,HIGH);		//put test pin HIGH 
	
	adc_start(ADC);
   80358:	f04f 0000 	mov.w	r0, #0
   8035c:	f2c4 000c 	movt	r0, #16396	; 0x400c
   80360:	f240 3111 	movw	r1, #785	; 0x311
   80364:	f2c0 0108 	movt	r1, #8
   80368:	4788      	blx	r1
	while((adc_get_status(ADC) & 0x1<<24)==0);  //Wait until DRDY get high
   8036a:	f04f 0400 	mov.w	r4, #0
   8036e:	f2c4 040c 	movt	r4, #16396	; 0x400c
   80372:	f240 3529 	movw	r5, #809	; 0x329
   80376:	f2c0 0508 	movt	r5, #8
   8037a:	4620      	mov	r0, r4
   8037c:	47a8      	blx	r5
   8037e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80382:	d0fa      	beq.n	8037a <TC0_Handler+0x4e>

	invalue=adc_get_latest_value(ADC);			//get input value
   80384:	f04f 0000 	mov.w	r0, #0
   80388:	f2c4 000c 	movt	r0, #16396	; 0x400c
   8038c:	f240 3325 	movw	r3, #805	; 0x325
   80390:	f2c0 0308 	movt	r3, #8
   80394:	4798      	blx	r3
   80396:	4601      	mov	r1, r0
	
	//***********
		

		
	dacc_write_conversion_data(DACC,outvalue);	//send output value to DAC
   80398:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   8039c:	f2c4 000c 	movt	r0, #16396	; 0x400c
   803a0:	f240 32e1 	movw	r2, #993	; 0x3e1
   803a4:	f2c0 0208 	movt	r2, #8
   803a8:	4790      	blx	r2
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   803ae:	f2c4 000e 	movt	r0, #16398	; 0x400e
   803b2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   803b6:	6341      	str	r1, [r0, #52]	; 0x34
	
	ioport_set_pin_level(CHECK_PIN,LOW);		//put test pin LOW
	
}
   803b8:	b003      	add	sp, #12
   803ba:	bd30      	pop	{r4, r5, pc}

000803bc <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   803bc:	f04f 0301 	mov.w	r3, #1
   803c0:	6003      	str	r3, [r0, #0]
   803c2:	4770      	bx	lr

000803c4 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   803c4:	b121      	cbz	r1, 803d0 <dacc_set_transfer_mode+0xc>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#else
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   803c6:	6842      	ldr	r2, [r0, #4]
   803c8:	f042 0310 	orr.w	r3, r2, #16
   803cc:	6043      	str	r3, [r0, #4]
   803ce:	e003      	b.n	803d8 <dacc_set_transfer_mode+0x14>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   803d0:	6843      	ldr	r3, [r0, #4]
   803d2:	f023 0110 	bic.w	r1, r3, #16
   803d6:	6041      	str	r1, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   803d8:	f04f 0000 	mov.w	r0, #0
   803dc:	4770      	bx	lr
   803de:	bf00      	nop

000803e0 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   803e0:	6201      	str	r1, [r0, #32]
   803e2:	4770      	bx	lr

000803e4 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   803e4:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   803e6:	2901      	cmp	r1, #1
   803e8:	d807      	bhi.n	803fa <dacc_set_channel_selection+0x16>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
   803ea:	f423 1298 	bic.w	r2, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   803ee:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
	p_dacc->DACC_MR = mr;
   803f2:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   803f4:	f04f 0000 	mov.w	r0, #0
   803f8:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
   803fa:	f04f 0001 	mov.w	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
   803fe:	4770      	bx	lr

00080400 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   80400:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   80402:	6844      	ldr	r4, [r0, #4]
   80404:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   80408:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   8040c:	ea4f 6101 	mov.w	r1, r1, lsl #24
   80410:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
	if (ul_maxs) {
   80414:	b112      	cbz	r2, 8041c <dacc_set_timing+0x1c>
		mr |= DACC_MR_MAXS;
   80416:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
   8041a:	e001      	b.n	80420 <dacc_set_timing+0x20>
	} else {
		mr &= ~DACC_MR_MAXS;
   8041c:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   80420:	ea4f 6303 	mov.w	r3, r3, lsl #24
   80424:	f003 527c 	and.w	r2, r3, #1056964608	; 0x3f000000
   80428:	4314      	orrs	r4, r2
	p_dacc->DACC_MR = mr;
   8042a:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
   8042c:	f04f 0000 	mov.w	r0, #0
   80430:	bc10      	pop	{r4}
   80432:	4770      	bx	lr

00080434 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   80434:	2901      	cmp	r1, #1
   80436:	d807      	bhi.n	80448 <dacc_enable_channel+0x14>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   80438:	f04f 0301 	mov.w	r3, #1
   8043c:	fa03 f101 	lsl.w	r1, r3, r1
   80440:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   80442:	f04f 0000 	mov.w	r0, #0
   80446:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
   80448:	f04f 0001 	mov.w	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   8044c:	4770      	bx	lr
   8044e:	bf00      	nop

00080450 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   80450:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80452:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80456:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80458:	f04f 0402 	mov.w	r4, #2
   8045c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8045e:	f04f 30ff 	mov.w	r0, #4294967295
   80462:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80464:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80466:	605a      	str	r2, [r3, #4]
}
   80468:	bc10      	pop	{r4}
   8046a:	4770      	bx	lr

0008046c <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8046c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   80470:	f04f 0305 	mov.w	r3, #5
   80474:	5043      	str	r3, [r0, r1]
   80476:	4770      	bx	lr

00080478 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80478:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8047c:	61ca      	str	r2, [r1, #28]
   8047e:	4770      	bx	lr

00080480 <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80480:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   80484:	624a      	str	r2, [r1, #36]	; 0x24
   80486:	4770      	bx	lr

00080488 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80488:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   8048c:	6a08      	ldr	r0, [r1, #32]
}
   8048e:	4770      	bx	lr

00080490 <configure_tc>:

#include <asf.h>
#include "conf_tc.h"

void configure_tc(void)
{
   80490:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   80492:	f04f 001b 	mov.w	r0, #27
   80496:	f640 3339 	movw	r3, #2873	; 0xb39
   8049a:	f2c0 0308 	movt	r3, #8
   8049e:	4798      	blx	r3

	/** Configure TC for a 10 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   804a0:	f04f 0400 	mov.w	r4, #0
   804a4:	f2c4 0408 	movt	r4, #16392	; 0x4008
   804a8:	4620      	mov	r0, r4
   804aa:	f04f 0100 	mov.w	r1, #0
   804ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   804b2:	f240 4351 	movw	r3, #1105	; 0x451
   804b6:	f2c0 0308 	movt	r3, #8
   804ba:	4798      	blx	r3
	tc_write_rc(TC0, 0, 4200);					//4200 corresponds to fs = 10 kHz
   804bc:	4620      	mov	r0, r4
   804be:	f04f 0100 	mov.w	r1, #0
   804c2:	f241 0268 	movw	r2, #4200	; 0x1068
   804c6:	f240 4379 	movw	r3, #1145	; 0x479
   804ca:	f2c0 0308 	movt	r3, #8
   804ce:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804d0:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   804d4:	f2ce 0000 	movt	r0, #57344	; 0xe000
   804d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   804dc:	6002      	str	r2, [r0, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   804de:	4620      	mov	r0, r4
   804e0:	f04f 0100 	mov.w	r1, #0
   804e4:	f04f 0210 	mov.w	r2, #16
   804e8:	f240 4381 	movw	r3, #1153	; 0x481
   804ec:	f2c0 0308 	movt	r3, #8
   804f0:	4798      	blx	r3

	tc_start(TC0, 0);
   804f2:	4620      	mov	r0, r4
   804f4:	f04f 0100 	mov.w	r1, #0
   804f8:	f240 426d 	movw	r2, #1133	; 0x46d
   804fc:	f2c0 0208 	movt	r2, #8
   80500:	4790      	blx	r2
   80502:	bd10      	pop	{r4, pc}

00080504 <main>:
#include "sampel_int.h"



int main (void)
{
   80504:	b508      	push	{r3, lr}

	sysclk_init();
   80506:	f240 536d 	movw	r3, #1389	; 0x56d
   8050a:	f2c0 0308 	movt	r3, #8
   8050e:	4798      	blx	r3
	board_init();
   80510:	f240 50e5 	movw	r0, #1509	; 0x5e5
   80514:	f2c0 0008 	movt	r0, #8
   80518:	4780      	blx	r0
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8051a:	f04f 000b 	mov.w	r0, #11
   8051e:	f640 3439 	movw	r4, #2873	; 0xb39
   80522:	f2c0 0408 	movt	r4, #8
   80526:	47a0      	blx	r4
   80528:	f04f 000c 	mov.w	r0, #12
   8052c:	47a0      	blx	r4
   8052e:	f04f 000d 	mov.w	r0, #13
   80532:	47a0      	blx	r4
   80534:	f04f 000e 	mov.w	r0, #14
   80538:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8053e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80542:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80546:	610a      	str	r2, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80548:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
	ioport_init();
	ioport_set_pin_dir(CHECK_PIN, IOPORT_DIR_OUTPUT);

	
	adc_setup();
   8054c:	f240 13a5 	movw	r3, #421	; 0x1a5
   80550:	f2c0 0308 	movt	r3, #8
   80554:	4798      	blx	r3
	dac_setup();
   80556:	f240 2025 	movw	r0, #549	; 0x225
   8055a:	f2c0 0008 	movt	r0, #8
   8055e:	4780      	blx	r0
	configure_tc();
   80560:	f240 4491 	movw	r4, #1169	; 0x491
   80564:	f2c0 0408 	movt	r4, #8
   80568:	47a0      	blx	r4
   8056a:	e7fe      	b.n	8056a <main+0x66>

0008056c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8056c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8056e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   80572:	f2c0 5001 	movt	r0, #1281	; 0x501
   80576:	f640 63c1 	movw	r3, #3777	; 0xec1
   8057a:	f2c0 0308 	movt	r3, #8
   8057e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80580:	f04f 0000 	mov.w	r0, #0
   80584:	f04f 013e 	mov.w	r1, #62	; 0x3e
   80588:	f640 2299 	movw	r2, #2713	; 0xa99
   8058c:	f2c0 0208 	movt	r2, #8
   80590:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80592:	f640 3409 	movw	r4, #2825	; 0xb09
   80596:	f2c0 0408 	movt	r4, #8
   8059a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8059c:	2800      	cmp	r0, #0
   8059e:	d0fc      	beq.n	8059a <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   805a0:	f640 3019 	movw	r0, #2841	; 0xb19
   805a4:	f2c0 0008 	movt	r0, #8
   805a8:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   805aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   805ae:	f2c4 010e 	movt	r1, #16398	; 0x400e
   805b2:	f643 7301 	movw	r3, #16129	; 0x3f01
   805b6:	f2c2 030d 	movt	r3, #8205	; 0x200d
   805ba:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   805bc:	f640 3429 	movw	r4, #2857	; 0xb29
   805c0:	f2c0 0408 	movt	r4, #8
   805c4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   805c6:	2800      	cmp	r0, #0
   805c8:	d0fc      	beq.n	805c4 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   805ca:	f04f 0010 	mov.w	r0, #16
   805ce:	f640 12f9 	movw	r2, #2553	; 0x9f9
   805d2:	f2c0 0208 	movt	r2, #8
   805d6:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   805d8:	f640 40f9 	movw	r0, #3321	; 0xcf9
   805dc:	f2c0 0008 	movt	r0, #8
   805e0:	4780      	blx	r0
   805e2:	bd10      	pop	{r4, pc}

000805e4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   805e4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   805e6:	f641 2350 	movw	r3, #6736	; 0x1a50
   805ea:	f2c4 030e 	movt	r3, #16398	; 0x400e
   805ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805f2:	605a      	str	r2, [r3, #4]
   805f4:	f04f 000b 	mov.w	r0, #11
   805f8:	f640 3439 	movw	r4, #2873	; 0xb39
   805fc:	f2c0 0408 	movt	r4, #8
   80600:	47a0      	blx	r4
   80602:	f04f 000c 	mov.w	r0, #12
   80606:	47a0      	blx	r4
   80608:	f04f 000d 	mov.w	r0, #13
   8060c:	47a0      	blx	r4
   8060e:	f04f 000e 	mov.w	r0, #14
   80612:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80614:	f04f 003b 	mov.w	r0, #59	; 0x3b
   80618:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8061c:	f240 746d 	movw	r4, #1901	; 0x76d
   80620:	f2c0 0408 	movt	r4, #8
   80624:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80626:	f04f 0055 	mov.w	r0, #85	; 0x55
   8062a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8062e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80630:	f04f 0056 	mov.w	r0, #86	; 0x56
   80634:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80638:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8063a:	f04f 0068 	mov.w	r0, #104	; 0x68
   8063e:	f04f 0179 	mov.w	r1, #121	; 0x79
   80642:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80646:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80648:	f04f 005c 	mov.w	r0, #92	; 0x5c
   8064c:	f04f 0101 	mov.w	r1, #1
   80650:	f6c2 0100 	movt	r1, #10240	; 0x2800
   80654:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80656:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8065a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8065e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80666:	f640 036d 	movw	r3, #2157	; 0x86d
   8066a:	f2c0 0308 	movt	r3, #8
   8066e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80670:	f04f 002b 	mov.w	r0, #43	; 0x2b
   80674:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80678:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8067a:	f04f 002a 	mov.w	r0, #42	; 0x2a
   8067e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80682:	47a0      	blx	r4
   80684:	bd10      	pop	{r4, pc}
   80686:	bf00      	nop

00080688 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80688:	b10a      	cbz	r2, 8068e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8068a:	6641      	str	r1, [r0, #100]	; 0x64
   8068c:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8068e:	6601      	str	r1, [r0, #96]	; 0x60
   80690:	4770      	bx	lr
   80692:	bf00      	nop

00080694 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80694:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80696:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8069a:	d016      	beq.n	806ca <pio_set_peripheral+0x36>
   8069c:	d804      	bhi.n	806a8 <pio_set_peripheral+0x14>
   8069e:	b1c9      	cbz	r1, 806d4 <pio_set_peripheral+0x40>
   806a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   806a4:	d115      	bne.n	806d2 <pio_set_peripheral+0x3e>
   806a6:	e009      	b.n	806bc <pio_set_peripheral+0x28>
   806a8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   806ac:	d012      	beq.n	806d4 <pio_set_peripheral+0x40>
   806ae:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   806b2:	d00f      	beq.n	806d4 <pio_set_peripheral+0x40>
   806b4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   806b8:	d10b      	bne.n	806d2 <pio_set_peripheral+0x3e>
   806ba:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   806bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   806be:	6f01      	ldr	r1, [r0, #112]	; 0x70
   806c0:	400b      	ands	r3, r1
   806c2:	ea23 0302 	bic.w	r3, r3, r2
   806c6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   806c8:	e003      	b.n	806d2 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   806ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   806cc:	ea42 0103 	orr.w	r1, r2, r3
   806d0:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   806d2:	6042      	str	r2, [r0, #4]
   806d4:	4770      	bx	lr
   806d6:	bf00      	nop

000806d8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   806d8:	6441      	str	r1, [r0, #68]	; 0x44
   806da:	4770      	bx	lr

000806dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   806dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806de:	4604      	mov	r4, r0
   806e0:	460d      	mov	r5, r1
   806e2:	4616      	mov	r6, r2
   806e4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   806e6:	f240 63d9 	movw	r3, #1753	; 0x6d9
   806ea:	f2c0 0308 	movt	r3, #8
   806ee:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   806f0:	4620      	mov	r0, r4
   806f2:	4629      	mov	r1, r5
   806f4:	9a06      	ldr	r2, [sp, #24]
   806f6:	f240 6389 	movw	r3, #1673	; 0x689
   806fa:	f2c0 0308 	movt	r3, #8
   806fe:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80700:	b10f      	cbz	r7, 80706 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   80702:	6525      	str	r5, [r4, #80]	; 0x50
   80704:	e000      	b.n	80708 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80706:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80708:	b10e      	cbz	r6, 8070e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8070a:	6325      	str	r5, [r4, #48]	; 0x30
   8070c:	e000      	b.n	80710 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8070e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80710:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   80712:	6025      	str	r5, [r4, #0]
   80714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80716:	bf00      	nop

00080718 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80718:	b570      	push	{r4, r5, r6, lr}
   8071a:	4604      	mov	r4, r0
   8071c:	460d      	mov	r5, r1
   8071e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   80720:	f240 63d9 	movw	r3, #1753	; 0x6d9
   80724:	f2c0 0308 	movt	r3, #8
   80728:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8072a:	4620      	mov	r0, r4
   8072c:	4629      	mov	r1, r5
   8072e:	f006 0201 	and.w	r2, r6, #1
   80732:	f240 6389 	movw	r3, #1673	; 0x689
   80736:	f2c0 0308 	movt	r3, #8
   8073a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8073c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   80740:	bf14      	ite	ne
   80742:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80744:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80746:	f016 0f02 	tst.w	r6, #2
   8074a:	d002      	beq.n	80752 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   8074c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   80750:	e004      	b.n	8075c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80752:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   80756:	bf18      	it	ne
   80758:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8075c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8075e:	6025      	str	r5, [r4, #0]
   80760:	bd70      	pop	{r4, r5, r6, pc}
   80762:	bf00      	nop

00080764 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80764:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80766:	4770      	bx	lr

00080768 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80768:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8076a:	4770      	bx	lr

0008076c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8076c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8076e:	b083      	sub	sp, #12
   80770:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80772:	ea4f 1650 	mov.w	r6, r0, lsr #5
   80776:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   8077a:	f201 7207 	addw	r2, r1, #1799	; 0x707
   8077e:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80782:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   80786:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8078a:	d042      	beq.n	80812 <pio_configure_pin+0xa6>
   8078c:	d806      	bhi.n	8079c <pio_configure_pin+0x30>
   8078e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80792:	d00a      	beq.n	807aa <pio_configure_pin+0x3e>
   80794:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80798:	d164      	bne.n	80864 <pio_configure_pin+0xf8>
   8079a:	e020      	b.n	807de <pio_configure_pin+0x72>
   8079c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   807a0:	d046      	beq.n	80830 <pio_configure_pin+0xc4>
   807a2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   807a6:	d15d      	bne.n	80864 <pio_configure_pin+0xf8>
   807a8:	e042      	b.n	80830 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   807aa:	f000 071f 	and.w	r7, r0, #31
   807ae:	f04f 0401 	mov.w	r4, #1
   807b2:	fa04 f707 	lsl.w	r7, r4, r7
   807b6:	4630      	mov	r0, r6
   807b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807bc:	463a      	mov	r2, r7
   807be:	f240 6395 	movw	r3, #1685	; 0x695
   807c2:	f2c0 0308 	movt	r3, #8
   807c6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   807c8:	4630      	mov	r0, r6
   807ca:	4639      	mov	r1, r7
   807cc:	ea05 0204 	and.w	r2, r5, r4
   807d0:	f240 6389 	movw	r3, #1673	; 0x689
   807d4:	f2c0 0308 	movt	r3, #8
   807d8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   807da:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   807dc:	e044      	b.n	80868 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   807de:	f000 001f 	and.w	r0, r0, #31
   807e2:	f04f 0401 	mov.w	r4, #1
   807e6:	fa04 f700 	lsl.w	r7, r4, r0
   807ea:	4630      	mov	r0, r6
   807ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807f0:	463a      	mov	r2, r7
   807f2:	f240 6395 	movw	r3, #1685	; 0x695
   807f6:	f2c0 0308 	movt	r3, #8
   807fa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   807fc:	4630      	mov	r0, r6
   807fe:	4639      	mov	r1, r7
   80800:	ea05 0204 	and.w	r2, r5, r4
   80804:	f240 6389 	movw	r3, #1673	; 0x689
   80808:	f2c0 0308 	movt	r3, #8
   8080c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8080e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   80810:	e02a      	b.n	80868 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80812:	f000 021f 	and.w	r2, r0, #31
   80816:	f04f 0401 	mov.w	r4, #1
   8081a:	4630      	mov	r0, r6
   8081c:	fa04 f102 	lsl.w	r1, r4, r2
   80820:	462a      	mov	r2, r5
   80822:	f240 7319 	movw	r3, #1817	; 0x719
   80826:	f2c0 0308 	movt	r3, #8
   8082a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8082c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8082e:	e01b      	b.n	80868 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80830:	f000 021f 	and.w	r2, r0, #31
   80834:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80838:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8083c:	ea05 0104 	and.w	r1, r5, r4
   80840:	9100      	str	r1, [sp, #0]
   80842:	4630      	mov	r0, r6
   80844:	fa04 f102 	lsl.w	r1, r4, r2
   80848:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8084c:	bf14      	ite	ne
   8084e:	2200      	movne	r2, #0
   80850:	2201      	moveq	r2, #1
   80852:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80856:	f240 65dd 	movw	r5, #1757	; 0x6dd
   8085a:	f2c0 0508 	movt	r5, #8
   8085e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80860:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80862:	e001      	b.n	80868 <pio_configure_pin+0xfc>

	default:
		return 0;
   80864:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   80868:	b003      	add	sp, #12
   8086a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008086c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8086c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8086e:	b083      	sub	sp, #12
   80870:	4607      	mov	r7, r0
   80872:	460e      	mov	r6, r1
   80874:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80876:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8087a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8087e:	d036      	beq.n	808ee <pio_configure_pin_group+0x82>
   80880:	d806      	bhi.n	80890 <pio_configure_pin_group+0x24>
   80882:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80886:	d00a      	beq.n	8089e <pio_configure_pin_group+0x32>
   80888:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8088c:	d14d      	bne.n	8092a <pio_configure_pin_group+0xbe>
   8088e:	e01a      	b.n	808c6 <pio_configure_pin_group+0x5a>
   80890:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80894:	d033      	beq.n	808fe <pio_configure_pin_group+0x92>
   80896:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8089a:	d146      	bne.n	8092a <pio_configure_pin_group+0xbe>
   8089c:	e02f      	b.n	808fe <pio_configure_pin_group+0x92>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8089e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808a2:	4632      	mov	r2, r6
   808a4:	f240 6395 	movw	r3, #1685	; 0x695
   808a8:	f2c0 0308 	movt	r3, #8
   808ac:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   808ae:	4638      	mov	r0, r7
   808b0:	4631      	mov	r1, r6
   808b2:	f005 0201 	and.w	r2, r5, #1
   808b6:	f240 6389 	movw	r3, #1673	; 0x689
   808ba:	f2c0 0308 	movt	r3, #8
   808be:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   808c0:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   808c4:	e033      	b.n	8092e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   808c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808ca:	4632      	mov	r2, r6
   808cc:	f240 6395 	movw	r3, #1685	; 0x695
   808d0:	f2c0 0308 	movt	r3, #8
   808d4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   808d6:	4638      	mov	r0, r7
   808d8:	4631      	mov	r1, r6
   808da:	f005 0201 	and.w	r2, r5, #1
   808de:	f240 6389 	movw	r3, #1673	; 0x689
   808e2:	f2c0 0308 	movt	r3, #8
   808e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   808e8:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   808ec:	e01f      	b.n	8092e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   808ee:	f240 7319 	movw	r3, #1817	; 0x719
   808f2:	f2c0 0308 	movt	r3, #8
   808f6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   808f8:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   808fc:	e017      	b.n	8092e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   808fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80902:	f005 0001 	and.w	r0, r5, #1
   80906:	9000      	str	r0, [sp, #0]
   80908:	4638      	mov	r0, r7
   8090a:	4631      	mov	r1, r6
   8090c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80910:	bf14      	ite	ne
   80912:	2200      	movne	r2, #0
   80914:	2201      	moveq	r2, #1
   80916:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8091a:	f240 64dd 	movw	r4, #1757	; 0x6dd
   8091e:	f2c0 0408 	movt	r4, #8
   80922:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80924:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80928:	e001      	b.n	8092e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8092a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8092e:	b003      	add	sp, #12
   80930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80932:	bf00      	nop

00080934 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80936:	4604      	mov	r4, r0
   80938:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8093a:	f240 7365 	movw	r3, #1893	; 0x765
   8093e:	f2c0 0308 	movt	r3, #8
   80942:	4798      	blx	r3
   80944:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80946:	4620      	mov	r0, r4
   80948:	f240 7169 	movw	r1, #1897	; 0x769
   8094c:	f2c0 0108 	movt	r1, #8
   80950:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   80952:	4005      	ands	r5, r0
   80954:	d014      	beq.n	80980 <pio_handler_process+0x4c>
   80956:	4c0b      	ldr	r4, [pc, #44]	; (80984 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   80958:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8095a:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   8095e:	42b0      	cmp	r0, r6
   80960:	d10a      	bne.n	80978 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80962:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80966:	4229      	tst	r1, r5
   80968:	d006      	beq.n	80978 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8096a:	6822      	ldr	r2, [r4, #0]
   8096c:	4630      	mov	r0, r6
   8096e:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80970:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80974:	ea25 0503 	bic.w	r5, r5, r3
   80978:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8097c:	2d00      	cmp	r5, #0
   8097e:	d1eb      	bne.n	80958 <pio_handler_process+0x24>
   80980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80982:	bf00      	nop
   80984:	20070460 	.word	0x20070460

00080988 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80988:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8098a:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8098e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80992:	f04f 010b 	mov.w	r1, #11
   80996:	f640 1335 	movw	r3, #2357	; 0x935
   8099a:	f2c0 0308 	movt	r3, #8
   8099e:	4798      	blx	r3
   809a0:	bd08      	pop	{r3, pc}
   809a2:	bf00      	nop

000809a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   809a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   809a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   809aa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   809ae:	f04f 010c 	mov.w	r1, #12
   809b2:	f640 1335 	movw	r3, #2357	; 0x935
   809b6:	f2c0 0308 	movt	r3, #8
   809ba:	4798      	blx	r3
   809bc:	bd08      	pop	{r3, pc}
   809be:	bf00      	nop

000809c0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   809c2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   809c6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   809ca:	f04f 010d 	mov.w	r1, #13
   809ce:	f640 1335 	movw	r3, #2357	; 0x935
   809d2:	f2c0 0308 	movt	r3, #8
   809d6:	4798      	blx	r3
   809d8:	bd08      	pop	{r3, pc}
   809da:	bf00      	nop

000809dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   809dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   809de:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   809e2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   809e6:	f04f 010e 	mov.w	r1, #14
   809ea:	f640 1335 	movw	r3, #2357	; 0x935
   809ee:	f2c0 0308 	movt	r3, #8
   809f2:	4798      	blx	r3
   809f4:	bd08      	pop	{r3, pc}
   809f6:	bf00      	nop

000809f8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   809f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   809fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a02:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80a06:	4308      	orrs	r0, r1
   80a08:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80a0c:	f010 0f08 	tst.w	r0, #8
   80a10:	d007      	beq.n	80a22 <pmc_switch_mck_to_pllack+0x2a>
   80a12:	e010      	b.n	80a36 <pmc_switch_mck_to_pllack+0x3e>
   80a14:	f100 33ff 	add.w	r3, r0, #4294967295
   80a18:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80a1a:	f010 0f08 	tst.w	r0, #8
   80a1e:	d038      	beq.n	80a92 <pmc_switch_mck_to_pllack+0x9a>
   80a20:	e009      	b.n	80a36 <pmc_switch_mck_to_pllack+0x3e>
   80a22:	f44f 6000 	mov.w	r0, #2048	; 0x800
   80a26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80a2a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80a2e:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80a30:	f011 0f08 	tst.w	r1, #8
   80a34:	d0ee      	beq.n	80a14 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80a3a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80a3e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80a40:	f022 0303 	bic.w	r3, r2, #3
   80a44:	f043 0002 	orr.w	r0, r3, #2
   80a48:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a4a:	6e89      	ldr	r1, [r1, #104]	; 0x68
   80a4c:	f011 0f08 	tst.w	r1, #8
   80a50:	d009      	beq.n	80a66 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a52:	f04f 0000 	mov.w	r0, #0
   80a56:	4770      	bx	lr
   80a58:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a5c:	6e91      	ldr	r1, [r2, #104]	; 0x68
   80a5e:	f011 0f08 	tst.w	r1, #8
   80a62:	d013      	beq.n	80a8c <pmc_switch_mck_to_pllack+0x94>
   80a64:	e009      	b.n	80a7a <pmc_switch_mck_to_pllack+0x82>
   80a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80a6e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80a72:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80a74:	f010 0f08 	tst.w	r0, #8
   80a78:	d0ee      	beq.n	80a58 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a7a:	f04f 0000 	mov.w	r0, #0
   80a7e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a80:	f04f 0001 	mov.w	r0, #1
   80a84:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a86:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   80a8a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a8c:	3b01      	subs	r3, #1
   80a8e:	d1f0      	bne.n	80a72 <pmc_switch_mck_to_pllack+0x7a>
   80a90:	e7f9      	b.n	80a86 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a92:	1e58      	subs	r0, r3, #1
   80a94:	d1cb      	bne.n	80a2e <pmc_switch_mck_to_pllack+0x36>
   80a96:	e7f3      	b.n	80a80 <pmc_switch_mck_to_pllack+0x88>

00080a98 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80a98:	b188      	cbz	r0, 80abe <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80a9e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80aa2:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80aa4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   80aa8:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   80aac:	4002      	ands	r2, r0
   80aae:	f04f 0302 	mov.w	r3, #2
   80ab2:	f2c0 1337 	movt	r3, #311	; 0x137
   80ab6:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80aba:	6208      	str	r0, [r1, #32]
   80abc:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80abe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ac2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ac6:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80ac8:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   80acc:	f020 0203 	bic.w	r2, r0, #3
   80ad0:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   80ad4:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80ad8:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80adc:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80ae0:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80ae2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80ae6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80aea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80aec:	f013 0f01 	tst.w	r3, #1
   80af0:	d0fb      	beq.n	80aea <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80af2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80af6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80afa:	6a08      	ldr	r0, [r1, #32]
   80afc:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   80b00:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   80b04:	620b      	str	r3, [r1, #32]
   80b06:	4770      	bx	lr

00080b08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80b08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b0c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b10:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b12:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80b16:	4770      	bx	lr

00080b18 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b1c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80b24:	629a      	str	r2, [r3, #40]	; 0x28
   80b26:	4770      	bx	lr

00080b28 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80b28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b2c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b30:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b32:	f000 0002 	and.w	r0, r0, #2
   80b36:	4770      	bx	lr

00080b38 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80b38:	282c      	cmp	r0, #44	; 0x2c
   80b3a:	d835      	bhi.n	80ba8 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   80b3c:	281f      	cmp	r0, #31
   80b3e:	d817      	bhi.n	80b70 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80b40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80b44:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80b48:	698a      	ldr	r2, [r1, #24]
   80b4a:	f04f 0301 	mov.w	r3, #1
   80b4e:	fa03 f300 	lsl.w	r3, r3, r0
   80b52:	401a      	ands	r2, r3
   80b54:	4293      	cmp	r3, r2
   80b56:	d02a      	beq.n	80bae <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	fa01 f000 	lsl.w	r0, r1, r0
   80b60:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b64:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b68:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b6a:	f04f 0000 	mov.w	r0, #0
   80b6e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80b74:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80b78:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80b7c:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b80:	f04f 0101 	mov.w	r1, #1
   80b84:	fa01 f100 	lsl.w	r1, r1, r0
   80b88:	400a      	ands	r2, r1
   80b8a:	4291      	cmp	r1, r2
   80b8c:	d012      	beq.n	80bb4 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80b8e:	f04f 0301 	mov.w	r3, #1
   80b92:	fa03 f000 	lsl.w	r0, r3, r0
   80b96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80b9a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80b9e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80ba2:	f04f 0000 	mov.w	r0, #0
   80ba6:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80ba8:	f04f 0001 	mov.w	r0, #1
   80bac:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80bae:	f04f 0000 	mov.w	r0, #0
   80bb2:	4770      	bx	lr
   80bb4:	f04f 0000 	mov.w	r0, #0
}
   80bb8:	4770      	bx	lr
   80bba:	bf00      	nop

00080bbc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80bbc:	e7fe      	b.n	80bbc <Dummy_Handler>
   80bbe:	bf00      	nop

00080bc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80bc0:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80bc2:	f240 0300 	movw	r3, #0
   80bc6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80bca:	f241 02e4 	movw	r2, #4324	; 0x10e4
   80bce:	f2c0 0208 	movt	r2, #8
   80bd2:	429a      	cmp	r2, r3
   80bd4:	d003      	beq.n	80bde <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   80bd6:	4840      	ldr	r0, [pc, #256]	; (80cd8 <Reset_Handler+0x118>)
   80bd8:	4940      	ldr	r1, [pc, #256]	; (80cdc <Reset_Handler+0x11c>)
   80bda:	4281      	cmp	r1, r0
   80bdc:	d304      	bcc.n	80be8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80bde:	4b40      	ldr	r3, [pc, #256]	; (80ce0 <Reset_Handler+0x120>)
   80be0:	4a40      	ldr	r2, [pc, #256]	; (80ce4 <Reset_Handler+0x124>)
   80be2:	429a      	cmp	r2, r3
   80be4:	d325      	bcc.n	80c32 <Reset_Handler+0x72>
   80be6:	e042      	b.n	80c6e <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80be8:	4d3f      	ldr	r5, [pc, #252]	; (80ce8 <Reset_Handler+0x128>)
   80bea:	4c40      	ldr	r4, [pc, #256]	; (80cec <Reset_Handler+0x12c>)
   80bec:	1b63      	subs	r3, r4, r5
   80bee:	f023 0503 	bic.w	r5, r3, #3
   80bf2:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80bf6:	f240 0200 	movw	r2, #0
   80bfa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80bfe:	f241 01e4 	movw	r1, #4324	; 0x10e4
   80c02:	f2c0 0108 	movt	r1, #8
   80c06:	f105 0004 	add.w	r0, r5, #4
   80c0a:	f3c5 0480 	ubfx	r4, r5, #2, #1
   80c0e:	585d      	ldr	r5, [r3, r1]
   80c10:	509d      	str	r5, [r3, r2]
   80c12:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c16:	4283      	cmp	r3, r0
   80c18:	d155      	bne.n	80cc6 <Reset_Handler+0x106>
   80c1a:	e7e0      	b.n	80bde <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   80c1c:	585d      	ldr	r5, [r3, r1]
   80c1e:	509d      	str	r5, [r3, r2]
   80c20:	f103 0304 	add.w	r3, r3, #4
   80c24:	585c      	ldr	r4, [r3, r1]
   80c26:	509c      	str	r4, [r3, r2]
   80c28:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c2c:	4283      	cmp	r3, r0
   80c2e:	d1f5      	bne.n	80c1c <Reset_Handler+0x5c>
   80c30:	e7d5      	b.n	80bde <Reset_Handler+0x1e>
   80c32:	4d2f      	ldr	r5, [pc, #188]	; (80cf0 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80c34:	492f      	ldr	r1, [pc, #188]	; (80cf4 <Reset_Handler+0x134>)
   80c36:	1b48      	subs	r0, r1, r5
   80c38:	f020 0403 	bic.w	r4, r0, #3
   80c3c:	f240 4338 	movw	r3, #1080	; 0x438
   80c40:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80c44:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80c46:	f04f 0100 	mov.w	r1, #0
   80c4a:	1b50      	subs	r0, r2, r5
   80c4c:	f1a0 0004 	sub.w	r0, r0, #4
   80c50:	f3c0 0480 	ubfx	r4, r0, #2, #1
   80c54:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c58:	4295      	cmp	r5, r2
   80c5a:	d12d      	bne.n	80cb8 <Reset_Handler+0xf8>
   80c5c:	e007      	b.n	80c6e <Reset_Handler+0xae>
   80c5e:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   80c62:	6069      	str	r1, [r5, #4]
   80c64:	f105 0508 	add.w	r5, r5, #8
   80c68:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c6a:	4295      	cmp	r5, r2
   80c6c:	d1f7      	bne.n	80c5e <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80c6e:	f240 0500 	movw	r5, #0
   80c72:	f2c0 0508 	movt	r5, #8
   80c76:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   80c7a:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   80c7e:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   80c82:	f2ce 0000 	movt	r0, #57344	; 0xe000
   80c86:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80c88:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   80c8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   80c90:	d207      	bcs.n	80ca2 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80c92:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   80c96:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80c9a:	689d      	ldr	r5, [r3, #8]
   80c9c:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   80ca0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ca2:	f241 014d 	movw	r1, #4173	; 0x104d
   80ca6:	f2c0 0108 	movt	r1, #8
   80caa:	4788      	blx	r1

	/* Branch to main function */
	main();
   80cac:	f240 5005 	movw	r0, #1285	; 0x505
   80cb0:	f2c0 0008 	movt	r0, #8
   80cb4:	4780      	blx	r0
   80cb6:	e7fe      	b.n	80cb6 <Reset_Handler+0xf6>
   80cb8:	2c00      	cmp	r4, #0
   80cba:	d0d0      	beq.n	80c5e <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80cbc:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80cc0:	4295      	cmp	r5, r2
   80cc2:	d1cc      	bne.n	80c5e <Reset_Handler+0x9e>
   80cc4:	e7d3      	b.n	80c6e <Reset_Handler+0xae>
   80cc6:	2c00      	cmp	r4, #0
   80cc8:	d0a8      	beq.n	80c1c <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80cca:	585c      	ldr	r4, [r3, r1]
   80ccc:	509c      	str	r4, [r3, r2]
   80cce:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80cd2:	4283      	cmp	r3, r0
   80cd4:	d1a2      	bne.n	80c1c <Reset_Handler+0x5c>
   80cd6:	e782      	b.n	80bde <Reset_Handler+0x1e>
   80cd8:	20070438 	.word	0x20070438
   80cdc:	20070000 	.word	0x20070000
   80ce0:	200704c4 	.word	0x200704c4
   80ce4:	20070438 	.word	0x20070438
   80ce8:	20070004 	.word	0x20070004
   80cec:	2007043b 	.word	0x2007043b
   80cf0:	20070434 	.word	0x20070434
   80cf4:	200704bf 	.word	0x200704bf

00080cf8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80cf8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80cfc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d00:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80d02:	f000 0103 	and.w	r1, r0, #3
   80d06:	2903      	cmp	r1, #3
   80d08:	f200 80b1 	bhi.w	80e6e <SystemCoreClockUpdate+0x176>
   80d0c:	e8df f001 	tbb	[pc, r1]
   80d10:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d14:	f641 2010 	movw	r0, #6672	; 0x1a10
   80d18:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80d1c:	6941      	ldr	r1, [r0, #20]
   80d1e:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d22:	f240 0300 	movw	r3, #0
   80d26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80d2a:	bf14      	ite	ne
   80d2c:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d30:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d34:	601a      	str	r2, [r3, #0]
   80d36:	e09a      	b.n	80e6e <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d3c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d40:	6a18      	ldr	r0, [r3, #32]
   80d42:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80d46:	d009      	beq.n	80d5c <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d48:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80d4c:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80d50:	f240 0200 	movw	r2, #0
   80d54:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d58:	6013      	str	r3, [r2, #0]
   80d5a:	e088      	b.n	80e6e <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d5c:	f44f 6110 	mov.w	r1, #2304	; 0x900
   80d60:	f2c0 013d 	movt	r1, #61	; 0x3d
   80d64:	f240 0200 	movw	r2, #0
   80d68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80d6c:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80d72:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80d76:	6a18      	ldr	r0, [r3, #32]
   80d78:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80d7c:	2910      	cmp	r1, #16
   80d7e:	d002      	beq.n	80d86 <SystemCoreClockUpdate+0x8e>
   80d80:	2920      	cmp	r1, #32
   80d82:	d174      	bne.n	80e6e <SystemCoreClockUpdate+0x176>
   80d84:	e009      	b.n	80d9a <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d86:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   80d8a:	f2c0 007a 	movt	r0, #122	; 0x7a
   80d8e:	f240 0100 	movw	r1, #0
   80d92:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d96:	6008      	str	r0, [r1, #0]
				break;
   80d98:	e069      	b.n	80e6e <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d9a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   80d9e:	f2c0 03b7 	movt	r3, #183	; 0xb7
   80da2:	f240 0200 	movw	r2, #0
   80da6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80daa:	6013      	str	r3, [r2, #0]
				break;
   80dac:	e05f      	b.n	80e6e <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80dae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80db2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80db6:	6a13      	ldr	r3, [r2, #32]
   80db8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80dbc:	d009      	beq.n	80dd2 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80dbe:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80dc2:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80dc6:	f240 0200 	movw	r2, #0
   80dca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80dce:	6011      	str	r1, [r2, #0]
   80dd0:	e027      	b.n	80e22 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80dd2:	f44f 6010 	mov.w	r0, #2304	; 0x900
   80dd6:	f2c0 003d 	movt	r0, #61	; 0x3d
   80dda:	f240 0100 	movw	r1, #0
   80dde:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80de2:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80de4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80de8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80dec:	6a13      	ldr	r3, [r2, #32]
   80dee:	f003 0070 	and.w	r0, r3, #112	; 0x70
   80df2:	2810      	cmp	r0, #16
   80df4:	d002      	beq.n	80dfc <SystemCoreClockUpdate+0x104>
   80df6:	2820      	cmp	r0, #32
   80df8:	d113      	bne.n	80e22 <SystemCoreClockUpdate+0x12a>
   80dfa:	e009      	b.n	80e10 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80dfc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   80e00:	f2c0 037a 	movt	r3, #122	; 0x7a
   80e04:	f240 0000 	movw	r0, #0
   80e08:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e0c:	6003      	str	r3, [r0, #0]
				break;
   80e0e:	e008      	b.n	80e22 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e10:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   80e14:	f2c0 01b7 	movt	r1, #183	; 0xb7
   80e18:	f240 0200 	movw	r2, #0
   80e1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e20:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80e26:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80e2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80e2c:	f000 0103 	and.w	r1, r0, #3
   80e30:	2902      	cmp	r1, #2
   80e32:	d113      	bne.n	80e5c <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   80e38:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80e3c:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e3e:	6a89      	ldr	r1, [r1, #40]	; 0x28
   80e40:	f240 0300 	movw	r3, #0
   80e44:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e48:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80e4c:	681a      	ldr	r2, [r3, #0]
   80e4e:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e52:	b2c9      	uxtb	r1, r1
   80e54:	fbb0 f2f1 	udiv	r2, r0, r1
   80e58:	601a      	str	r2, [r3, #0]
   80e5a:	e008      	b.n	80e6e <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   80e60:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   80e64:	f240 0200 	movw	r2, #0
   80e68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e6c:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e6e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80e72:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80e76:	6b10      	ldr	r0, [r2, #48]	; 0x30
   80e78:	f000 0170 	and.w	r1, r0, #112	; 0x70
   80e7c:	2970      	cmp	r1, #112	; 0x70
   80e7e:	d10e      	bne.n	80e9e <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   80e80:	f240 0300 	movw	r3, #0
   80e84:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80e88:	6818      	ldr	r0, [r3, #0]
   80e8a:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   80e8e:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   80e92:	fba2 0100 	umull	r0, r1, r2, r0
   80e96:	ea4f 0051 	mov.w	r0, r1, lsr #1
   80e9a:	6018      	str	r0, [r3, #0]
   80e9c:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80ea2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ea8:	f240 0000 	movw	r0, #0
   80eac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80eb0:	f3c2 1102 	ubfx	r1, r2, #4, #3
   80eb4:	6803      	ldr	r3, [r0, #0]
   80eb6:	fa23 f301 	lsr.w	r3, r3, r1
   80eba:	6003      	str	r3, [r0, #0]
   80ebc:	4770      	bx	lr
   80ebe:	bf00      	nop

00080ec0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80ec0:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   80ec4:	f2c0 1321 	movt	r3, #289	; 0x121
   80ec8:	4298      	cmp	r0, r3
   80eca:	d80c      	bhi.n	80ee6 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80ecc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80ed0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80ed4:	f04f 0000 	mov.w	r0, #0
   80ed8:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80eda:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   80ede:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80ee2:	6008      	str	r0, [r1, #0]
   80ee4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80ee6:	f24f 017f 	movw	r1, #61567	; 0xf07f
   80eea:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   80eee:	4288      	cmp	r0, r1
   80ef0:	d80c      	bhi.n	80f0c <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80ef2:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   80ef6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80efa:	f44f 7180 	mov.w	r1, #256	; 0x100
   80efe:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80f00:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80f04:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80f08:	6011      	str	r1, [r2, #0]
   80f0a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80f0c:	f648 73ff 	movw	r3, #36863	; 0x8fff
   80f10:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   80f14:	4298      	cmp	r0, r3
   80f16:	d80c      	bhi.n	80f32 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80f18:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   80f1c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f20:	f44f 7200 	mov.w	r2, #512	; 0x200
   80f24:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80f26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   80f2a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80f2e:	601a      	str	r2, [r3, #0]
   80f30:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80f32:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   80f36:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   80f3a:	4288      	cmp	r0, r1
   80f3c:	d80c      	bhi.n	80f58 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80f3e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80f42:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80f46:	f44f 7240 	mov.w	r2, #768	; 0x300
   80f4a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80f4c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   80f50:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80f54:	6002      	str	r2, [r0, #0]
   80f56:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   80f58:	f644 237f 	movw	r3, #19071	; 0x4a7f
   80f5c:	f2c0 535d 	movt	r3, #1373	; 0x55d
   80f60:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80f62:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   80f66:	f2c4 000e 	movt	r0, #16398	; 0x400e
   80f6a:	bf94      	ite	ls
   80f6c:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   80f70:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   80f74:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   80f76:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   80f7a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   80f7e:	600a      	str	r2, [r1, #0]
   80f80:	4770      	bx	lr
   80f82:	bf00      	nop

00080f84 <__register_exitproc>:
   80f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80f88:	4698      	mov	r8, r3
   80f8a:	4b23      	ldr	r3, [pc, #140]	; (81018 <__register_exitproc+0x94>)
   80f8c:	4606      	mov	r6, r0
   80f8e:	681c      	ldr	r4, [r3, #0]
   80f90:	460f      	mov	r7, r1
   80f92:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   80f96:	4691      	mov	r9, r2
   80f98:	b918      	cbnz	r0, 80fa2 <__register_exitproc+0x1e>
   80f9a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   80f9e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   80fa2:	6841      	ldr	r1, [r0, #4]
   80fa4:	291f      	cmp	r1, #31
   80fa6:	dd16      	ble.n	80fd6 <__register_exitproc+0x52>
   80fa8:	481c      	ldr	r0, [pc, #112]	; (8101c <__register_exitproc+0x98>)
   80faa:	b918      	cbnz	r0, 80fb4 <__register_exitproc+0x30>
   80fac:	f04f 30ff 	mov.w	r0, #4294967295
   80fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80fb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80fb8:	f3af 8000 	nop.w
   80fbc:	2800      	cmp	r0, #0
   80fbe:	d0f5      	beq.n	80fac <__register_exitproc+0x28>
   80fc0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   80fc4:	2500      	movs	r5, #0
   80fc6:	6045      	str	r5, [r0, #4]
   80fc8:	6002      	str	r2, [r0, #0]
   80fca:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   80fce:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   80fd2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   80fd6:	b1b6      	cbz	r6, 81006 <__register_exitproc+0x82>
   80fd8:	6844      	ldr	r4, [r0, #4]
   80fda:	2201      	movs	r2, #1
   80fdc:	fa02 f204 	lsl.w	r2, r2, r4
   80fe0:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   80fe4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   80fe8:	4311      	orrs	r1, r2
   80fea:	2e02      	cmp	r6, #2
   80fec:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   80ff0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   80ff4:	461c      	mov	r4, r3
   80ff6:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   80ffa:	d104      	bne.n	81006 <__register_exitproc+0x82>
   80ffc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   81000:	431a      	orrs	r2, r3
   81002:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   81006:	6841      	ldr	r1, [r0, #4]
   81008:	1c8b      	adds	r3, r1, #2
   8100a:	1c4a      	adds	r2, r1, #1
   8100c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   81010:	6042      	str	r2, [r0, #4]
   81012:	2000      	movs	r0, #0
   81014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81018:	000810b8 	.word	0x000810b8
   8101c:	00000000 	.word	0x00000000

00081020 <__libc_fini_array>:
   81020:	b570      	push	{r4, r5, r6, lr}
   81022:	4b08      	ldr	r3, [pc, #32]	; (81044 <__libc_fini_array+0x24>)
   81024:	4c08      	ldr	r4, [pc, #32]	; (81048 <__libc_fini_array+0x28>)
   81026:	2500      	movs	r5, #0
   81028:	1ae0      	subs	r0, r4, r3
   8102a:	1084      	asrs	r4, r0, #2
   8102c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   81030:	3d04      	subs	r5, #4
   81032:	b11c      	cbz	r4, 8103c <__libc_fini_array+0x1c>
   81034:	5972      	ldr	r2, [r6, r5]
   81036:	4790      	blx	r2
   81038:	3c01      	subs	r4, #1
   8103a:	e7f9      	b.n	81030 <__libc_fini_array+0x10>
   8103c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   81040:	f000 b848 	b.w	810d4 <_fini>
   81044:	000810e0 	.word	0x000810e0
   81048:	000810e4 	.word	0x000810e4

0008104c <__libc_init_array>:
   8104c:	b538      	push	{r3, r4, r5, lr}
   8104e:	4d0e      	ldr	r5, [pc, #56]	; (81088 <__libc_init_array+0x3c>)
   81050:	4b0e      	ldr	r3, [pc, #56]	; (8108c <__libc_init_array+0x40>)
   81052:	2400      	movs	r4, #0
   81054:	1ae8      	subs	r0, r5, r3
   81056:	1085      	asrs	r5, r0, #2
   81058:	42ac      	cmp	r4, r5
   8105a:	d005      	beq.n	81068 <__libc_init_array+0x1c>
   8105c:	490b      	ldr	r1, [pc, #44]	; (8108c <__libc_init_array+0x40>)
   8105e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   81062:	4790      	blx	r2
   81064:	3401      	adds	r4, #1
   81066:	e7f7      	b.n	81058 <__libc_init_array+0xc>
   81068:	f000 f82a 	bl	810c0 <_init>
   8106c:	4908      	ldr	r1, [pc, #32]	; (81090 <__libc_init_array+0x44>)
   8106e:	4a09      	ldr	r2, [pc, #36]	; (81094 <__libc_init_array+0x48>)
   81070:	1a54      	subs	r4, r2, r1
   81072:	10a5      	asrs	r5, r4, #2
   81074:	2400      	movs	r4, #0
   81076:	42ac      	cmp	r4, r5
   81078:	d005      	beq.n	81086 <__libc_init_array+0x3a>
   8107a:	4b05      	ldr	r3, [pc, #20]	; (81090 <__libc_init_array+0x44>)
   8107c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   81080:	4780      	blx	r0
   81082:	3401      	adds	r4, #1
   81084:	e7f7      	b.n	81076 <__libc_init_array+0x2a>
   81086:	bd38      	pop	{r3, r4, r5, pc}
   81088:	000810cc 	.word	0x000810cc
   8108c:	000810cc 	.word	0x000810cc
   81090:	000810cc 	.word	0x000810cc
   81094:	000810d4 	.word	0x000810d4

00081098 <register_fini>:
   81098:	4b02      	ldr	r3, [pc, #8]	; (810a4 <register_fini+0xc>)
   8109a:	b113      	cbz	r3, 810a2 <register_fini+0xa>
   8109c:	4802      	ldr	r0, [pc, #8]	; (810a8 <register_fini+0x10>)
   8109e:	f000 b805 	b.w	810ac <atexit>
   810a2:	4770      	bx	lr
   810a4:	00000000 	.word	0x00000000
   810a8:	00081021 	.word	0x00081021

000810ac <atexit>:
   810ac:	4601      	mov	r1, r0
   810ae:	2000      	movs	r0, #0
   810b0:	4602      	mov	r2, r0
   810b2:	4603      	mov	r3, r0
   810b4:	f7ff bf66 	b.w	80f84 <__register_exitproc>

000810b8 <_global_impure_ptr>:
   810b8:	0010 2007 0043 0000                         ... C...

000810c0 <_init>:
   810c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810c2:	bf00      	nop
   810c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   810c6:	bc08      	pop	{r3}
   810c8:	469e      	mov	lr, r3
   810ca:	4770      	bx	lr

000810cc <__init_array_start>:
   810cc:	00081099 	.word	0x00081099

000810d0 <__frame_dummy_init_array_entry>:
   810d0:	0008016d                                m...

000810d4 <_fini>:
   810d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810d6:	bf00      	nop
   810d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   810da:	bc08      	pop	{r3}
   810dc:	469e      	mov	lr, r3
   810de:	4770      	bx	lr

000810e0 <__fini_array_start>:
   810e0:	00080145 	.word	0x00080145
