
Project1404b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000191c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20070000  0008191c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20070430  00081d4c  00020430  2**2
                  ALLOC
  3 .stack        00002004  200704fc  00081e18  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020459  2**0
                  CONTENTS, READONLY
  6 .debug_info   000094ff  00000000  00000000  000204b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a94  00000000  00000000  000299b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003997  00000000  00000000  0002b445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000820  00000000  00000000  0002eddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000730  00000000  00000000  0002f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016f3c  00000000  00000000  0002fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bb5a  00000000  00000000  00046c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005fdd3  00000000  00000000  000527c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001190  00000000  00000000  000b2598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072500 	.word	0x20072500
   80004:	00080aa9 	.word	0x00080aa9
   80008:	00080aa5 	.word	0x00080aa5
   8000c:	00080aa5 	.word	0x00080aa5
   80010:	00080aa5 	.word	0x00080aa5
   80014:	00080aa5 	.word	0x00080aa5
   80018:	00080aa5 	.word	0x00080aa5
	...
   8002c:	00080aa5 	.word	0x00080aa5
   80030:	00080aa5 	.word	0x00080aa5
   80034:	00000000 	.word	0x00000000
   80038:	00080aa5 	.word	0x00080aa5
   8003c:	00080aa5 	.word	0x00080aa5
   80040:	00080aa5 	.word	0x00080aa5
   80044:	00080aa5 	.word	0x00080aa5
   80048:	00080aa5 	.word	0x00080aa5
   8004c:	00080aa5 	.word	0x00080aa5
   80050:	00080aa5 	.word	0x00080aa5
   80054:	00080aa5 	.word	0x00080aa5
   80058:	00080aa5 	.word	0x00080aa5
   8005c:	00080aa5 	.word	0x00080aa5
   80060:	00080aa5 	.word	0x00080aa5
   80064:	00080aa5 	.word	0x00080aa5
   80068:	00000000 	.word	0x00000000
   8006c:	00080915 	.word	0x00080915
   80070:	00080929 	.word	0x00080929
   80074:	0008093d 	.word	0x0008093d
   80078:	00080951 	.word	0x00080951
	...
   80084:	00080aa5 	.word	0x00080aa5
   80088:	00080aa5 	.word	0x00080aa5
   8008c:	00080aa5 	.word	0x00080aa5
   80090:	00080aa5 	.word	0x00080aa5
   80094:	00080aa5 	.word	0x00080aa5
   80098:	00080aa5 	.word	0x00080aa5
   8009c:	00080aa5 	.word	0x00080aa5
   800a0:	00080aa5 	.word	0x00080aa5
   800a4:	00000000 	.word	0x00000000
   800a8:	00080aa5 	.word	0x00080aa5
   800ac:	000803e5 	.word	0x000803e5
   800b0:	00080aa5 	.word	0x00080aa5
   800b4:	00080aa5 	.word	0x00080aa5
   800b8:	00080aa5 	.word	0x00080aa5
   800bc:	00080aa5 	.word	0x00080aa5
   800c0:	00080aa5 	.word	0x00080aa5
   800c4:	00080aa5 	.word	0x00080aa5
   800c8:	00080aa5 	.word	0x00080aa5
   800cc:	00080aa5 	.word	0x00080aa5
   800d0:	00080aa5 	.word	0x00080aa5
   800d4:	00080aa5 	.word	0x00080aa5
   800d8:	00080aa5 	.word	0x00080aa5
   800dc:	00080aa5 	.word	0x00080aa5
   800e0:	00080aa5 	.word	0x00080aa5
   800e4:	00080aa5 	.word	0x00080aa5
   800e8:	00080aa5 	.word	0x00080aa5
   800ec:	00080aa5 	.word	0x00080aa5
   800f0:	00080aa5 	.word	0x00080aa5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070430 	.word	0x20070430
   80110:	00000000 	.word	0x00000000
   80114:	0008191c 	.word	0x0008191c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070434 	.word	0x20070434
   80144:	0008191c 	.word	0x0008191c
   80148:	0008191c 	.word	0x0008191c
   8014c:	00000000 	.word	0x00000000

00080150 <adc_setup>:
#include <asf.h>
#include "adcdac.h"


void adc_setup()
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b12      	ldr	r3, [pc, #72]	; (801a0 <adc_setup+0x50>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		//Configure for maximum frequency @ 84 MHz, CHECK THIS!!
   80158:	4c12      	ldr	r4, [pc, #72]	; (801a4 <adc_setup+0x54>)
   8015a:	2300      	movs	r3, #0
   8015c:	4a12      	ldr	r2, [pc, #72]	; (801a8 <adc_setup+0x58>)
   8015e:	4913      	ldr	r1, [pc, #76]	; (801ac <adc_setup+0x5c>)
   80160:	4620      	mov	r0, r4
   80162:	4d13      	ldr	r5, [pc, #76]	; (801b0 <adc_setup+0x60>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	2300      	movs	r3, #0
   80168:	461a      	mov	r2, r3
   8016a:	4619      	mov	r1, r3
   8016c:	4620      	mov	r0, r4
   8016e:	4d11      	ldr	r5, [pc, #68]	; (801b4 <adc_setup+0x64>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80172:	2100      	movs	r1, #0
   80174:	4620      	mov	r0, r4
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <adc_setup+0x68>)
   80178:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				//PB17 - AD8 for Arduino
   8017a:	210a      	movs	r1, #10
   8017c:	4620      	mov	r0, r4
   8017e:	4d0f      	ldr	r5, [pc, #60]	; (801bc <adc_setup+0x6c>)
   80180:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_7);					//AD0
   80182:	2107      	movs	r1, #7
   80184:	4620      	mov	r0, r4
   80186:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_6);
   80188:	2106      	movs	r1, #6
   8018a:	4620      	mov	r0, r4
   8018c:	47a8      	blx	r5
	adc_enable_channel(ADC, ADC_CHANNEL_5);
   8018e:	2105      	movs	r1, #5
   80190:	4620      	mov	r0, r4
   80192:	47a8      	blx	r5
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);			//trigg just by software
   80194:	2200      	movs	r2, #0
   80196:	4611      	mov	r1, r2
   80198:	4620      	mov	r0, r4
   8019a:	4b09      	ldr	r3, [pc, #36]	; (801c0 <adc_setup+0x70>)
   8019c:	4798      	blx	r3
   8019e:	bd38      	pop	{r3, r4, r5, pc}
   801a0:	00080a51 	.word	0x00080a51
   801a4:	400c0000 	.word	0x400c0000
   801a8:	01312d00 	.word	0x01312d00
   801ac:	0a037a00 	.word	0x0a037a00
   801b0:	00080219 	.word	0x00080219
   801b4:	0008026d 	.word	0x0008026d
   801b8:	0008024d 	.word	0x0008024d
   801bc:	00080291 	.word	0x00080291
   801c0:	0008025d 	.word	0x0008025d

000801c4 <dac_setup>:
}




void dac_setup() {
   801c4:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
   801c6:	2026      	movs	r0, #38	; 0x26
   801c8:	4b0c      	ldr	r3, [pc, #48]	; (801fc <dac_setup+0x38>)
   801ca:	4798      	blx	r3
	dacc_reset(DACC);
   801cc:	4c0c      	ldr	r4, [pc, #48]	; (80200 <dac_setup+0x3c>)
   801ce:	4620      	mov	r0, r4
   801d0:	4b0c      	ldr	r3, [pc, #48]	; (80204 <dac_setup+0x40>)
   801d2:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
   801d4:	2100      	movs	r1, #0
   801d6:	4620      	mov	r0, r4
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <dac_setup+0x44>)
   801da:	4798      	blx	r3
	dacc_set_timing(DACC,1,1,0);			//1 is shortest refresh period, 1 max. speed, 0 startup time
   801dc:	2300      	movs	r3, #0
   801de:	2201      	movs	r2, #1
   801e0:	4611      	mov	r1, r2
   801e2:	4620      	mov	r0, r4
   801e4:	4d09      	ldr	r5, [pc, #36]	; (8020c <dac_setup+0x48>)
   801e6:	47a8      	blx	r5
	
	dacc_set_channel_selection(DACC,1);		//Channel DAC0
   801e8:	2101      	movs	r1, #1
   801ea:	4620      	mov	r0, r4
   801ec:	4b08      	ldr	r3, [pc, #32]	; (80210 <dac_setup+0x4c>)
   801ee:	4798      	blx	r3
	dacc_enable_channel(DACC, 1);			//enable DAC0
   801f0:	2101      	movs	r1, #1
   801f2:	4620      	mov	r0, r4
   801f4:	4b07      	ldr	r3, [pc, #28]	; (80214 <dac_setup+0x50>)
   801f6:	4798      	blx	r3
   801f8:	bd38      	pop	{r3, r4, r5, pc}
   801fa:	bf00      	nop
   801fc:	00080a51 	.word	0x00080a51
   80200:	400c8000 	.word	0x400c8000
   80204:	00080471 	.word	0x00080471
   80208:	00080479 	.word	0x00080479
   8020c:	000804ad 	.word	0x000804ad
   80210:	00080495 	.word	0x00080495
   80214:	000804dd 	.word	0x000804dd

00080218 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80218:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8021a:	2401      	movs	r4, #1
   8021c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8021e:	2500      	movs	r5, #0
   80220:	6045      	str	r5, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80222:	f240 2402 	movw	r4, #514	; 0x202
   80226:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8022a:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8022e:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80232:	6844      	ldr	r4, [r0, #4]
   80234:	0052      	lsls	r2, r2, #1
   80236:	fbb1 f1f2 	udiv	r1, r1, r2
   8023a:	1e4a      	subs	r2, r1, #1
   8023c:	0212      	lsls	r2, r2, #8
   8023e:	b292      	uxth	r2, r2
   80240:	4323      	orrs	r3, r4
   80242:	431a      	orrs	r2, r3
   80244:	6042      	str	r2, [r0, #4]
	return 0;
}
   80246:	4628      	mov	r0, r5
   80248:	bc30      	pop	{r4, r5}
   8024a:	4770      	bx	lr

0008024c <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   8024c:	6843      	ldr	r3, [r0, #4]
   8024e:	0109      	lsls	r1, r1, #4
   80250:	f001 0110 	and.w	r1, r1, #16
   80254:	430b      	orrs	r3, r1
   80256:	6043      	str	r3, [r0, #4]
   80258:	4770      	bx	lr
   8025a:	bf00      	nop

0008025c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   8025c:	6843      	ldr	r3, [r0, #4]
   8025e:	01d2      	lsls	r2, r2, #7
   80260:	b2d2      	uxtb	r2, r2
   80262:	4319      	orrs	r1, r3
   80264:	4311      	orrs	r1, r2
   80266:	6041      	str	r1, [r0, #4]
   80268:	4770      	bx	lr
   8026a:	bf00      	nop

0008026c <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   8026c:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8026e:	6844      	ldr	r4, [r0, #4]
   80270:	0609      	lsls	r1, r1, #24
   80272:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   80276:	4322      	orrs	r2, r4
   80278:	430a      	orrs	r2, r1
   8027a:	071b      	lsls	r3, r3, #28
   8027c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80280:	4313      	orrs	r3, r2
   80282:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80284:	bc10      	pop	{r4}
   80286:	4770      	bx	lr

00080288 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80288:	2302      	movs	r3, #2
   8028a:	6003      	str	r3, [r0, #0]
   8028c:	4770      	bx	lr
   8028e:	bf00      	nop

00080290 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80290:	2301      	movs	r3, #1
   80292:	fa03 f101 	lsl.w	r1, r3, r1
   80296:	6101      	str	r1, [r0, #16]
   80298:	4770      	bx	lr
   8029a:	bf00      	nop

0008029c <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   8029c:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   8029e:	bf9a      	itte	ls
   802a0:	3050      	addls	r0, #80	; 0x50
   802a2:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   802a6:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   802a8:	4770      	bx	lr
   802aa:	bf00      	nop

000802ac <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   802ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   802ae:	4770      	bx	lr

000802b0 <twoToTwoAndAHalfkHz>:
	y2[1] = totsum;
	outvalue = (uint32_t)totsum;
	return outvalue;
}
//2000-2500 Hz
uint32_t twoToTwoAndAHalfkHz(uint32_t invalue){
   802b0:	b570      	push	{r4, r5, r6, lr}
   802b2:	4920      	ldr	r1, [pc, #128]	; (80334 <twoToTwoAndAHalfkHz+0x84>)
   802b4:	f101 051c 	add.w	r5, r1, #28
   802b8:	462b      	mov	r3, r5
	float totsum = 0;
	uint32_t outvalue;
	
	int i;
	for(i =M; i>0; i--){
		x3buff[i]=x3buff[i-1];
   802ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   802be:	605a      	str	r2, [r3, #4]
	int32_t sumy = 0;
	float totsum = 0;
	uint32_t outvalue;
	
	int i;
	for(i =M; i>0; i--){
   802c0:	428b      	cmp	r3, r1
   802c2:	d1fa      	bne.n	802ba <twoToTwoAndAHalfkHz+0xa>
		x3buff[i]=x3buff[i-1];
	}
	x3buff[0]=(int)invalue;
   802c4:	4b1b      	ldr	r3, [pc, #108]	; (80334 <twoToTwoAndAHalfkHz+0x84>)
   802c6:	f843 0904 	str.w	r0, [r3], #-4
   802ca:	491b      	ldr	r1, [pc, #108]	; (80338 <twoToTwoAndAHalfkHz+0x88>)
	outvalue = (uint32_t)totsum;
	return outvalue;
}
//2000-2500 Hz
uint32_t twoToTwoAndAHalfkHz(uint32_t invalue){
	int32_t sum = 0;
   802cc:	2200      	movs	r2, #0
		x3buff[i]=x3buff[i-1];
	}
	x3buff[0]=(int)invalue;
	int j;
	for( j =0; j<=M;j++){
		sum += ((x3buff[j]*b3[j]));
   802ce:	f853 0f04 	ldr.w	r0, [r3, #4]!
   802d2:	f851 4f04 	ldr.w	r4, [r1, #4]!
   802d6:	fb04 2200 	mla	r2, r4, r0, r2
	for(i =M; i>0; i--){
		x3buff[i]=x3buff[i-1];
	}
	x3buff[0]=(int)invalue;
	int j;
	for( j =0; j<=M;j++){
   802da:	429d      	cmp	r5, r3
   802dc:	d1f7      	bne.n	802ce <twoToTwoAndAHalfkHz+0x1e>
   802de:	4917      	ldr	r1, [pc, #92]	; (8033c <twoToTwoAndAHalfkHz+0x8c>)
   802e0:	4817      	ldr	r0, [pc, #92]	; (80340 <twoToTwoAndAHalfkHz+0x90>)
   802e2:	f101 031c 	add.w	r3, r1, #28
   802e6:	2400      	movs	r4, #0
		sum += ((x3buff[j]*b3[j]));
	}
	for( j =1; j<=N;j++){ // Summan av y
		sumy += ((y3[j]*a3[j]));
   802e8:	f851 5f04 	ldr.w	r5, [r1, #4]!
   802ec:	f850 6f04 	ldr.w	r6, [r0, #4]!
   802f0:	fb06 4405 	mla	r4, r6, r5, r4
	x3buff[0]=(int)invalue;
	int j;
	for( j =0; j<=M;j++){
		sum += ((x3buff[j]*b3[j]));
	}
	for( j =1; j<=N;j++){ // Summan av y
   802f4:	4299      	cmp	r1, r3
   802f6:	d1f7      	bne.n	802e8 <twoToTwoAndAHalfkHz+0x38>
   802f8:	4812      	ldr	r0, [pc, #72]	; (80344 <twoToTwoAndAHalfkHz+0x94>)
		sumy += ((y3[j]*a3[j]));
	}
	for(i = N; i>1;i--){ // Flyttar alla ett steg borde vara 1 ??:OOO
		y3[i]=y3[i-1];
   802fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   802fe:	6059      	str	r1, [r3, #4]
		sum += ((x3buff[j]*b3[j]));
	}
	for( j =1; j<=N;j++){ // Summan av y
		sumy += ((y3[j]*a3[j]));
	}
	for(i = N; i>1;i--){ // Flyttar alla ett steg borde vara 1 ??:OOO
   80300:	4283      	cmp	r3, r0
   80302:	d1fa      	bne.n	802fa <twoToTwoAndAHalfkHz+0x4a>
		y3[i]=y3[i-1];
	}
	totsum = ((sum/10000)+(sumy/10000));
   80304:	4810      	ldr	r0, [pc, #64]	; (80348 <twoToTwoAndAHalfkHz+0x98>)
   80306:	fb80 1302 	smull	r1, r3, r0, r2
   8030a:	17d2      	asrs	r2, r2, #31
   8030c:	ebc2 3223 	rsb	r2, r2, r3, asr #12
   80310:	fb80 3004 	smull	r3, r0, r0, r4
   80314:	17e4      	asrs	r4, r4, #31
   80316:	ebc4 3020 	rsb	r0, r4, r0, asr #12
   8031a:	4410      	add	r0, r2
   8031c:	4b0b      	ldr	r3, [pc, #44]	; (8034c <twoToTwoAndAHalfkHz+0x9c>)
   8031e:	4798      	blx	r3
   80320:	4604      	mov	r4, r0
	y3[1] = totsum;
   80322:	4b0b      	ldr	r3, [pc, #44]	; (80350 <twoToTwoAndAHalfkHz+0xa0>)
   80324:	4798      	blx	r3
   80326:	4b05      	ldr	r3, [pc, #20]	; (8033c <twoToTwoAndAHalfkHz+0x8c>)
   80328:	6058      	str	r0, [r3, #4]
	outvalue = (uint32_t)totsum;
	return outvalue;
   8032a:	4620      	mov	r0, r4
   8032c:	4b09      	ldr	r3, [pc, #36]	; (80354 <twoToTwoAndAHalfkHz+0xa4>)
   8032e:	4798      	blx	r3
}
   80330:	bd70      	pop	{r4, r5, r6, pc}
   80332:	bf00      	nop
   80334:	2007046c 	.word	0x2007046c
   80338:	000818cc 	.word	0x000818cc
   8033c:	2007044c 	.word	0x2007044c
   80340:	000818b0 	.word	0x000818b0
   80344:	20070450 	.word	0x20070450
   80348:	68db8bad 	.word	0x68db8bad
   8034c:	00081641 	.word	0x00081641
   80350:	000816e9 	.word	0x000816e9
   80354:	00081735 	.word	0x00081735

00080358 <modifyOutPut>:
	outvalue = (uint32_t)totsum;
	return outvalue;
}

//Modify filtervalue based on potentiometer
uint32_t modifyOutPut(uint32_t filtervalue,uint32_t analogValue){
   80358:	b510      	push	{r4, lr}

	if(analogValue <= 819){
   8035a:	f5b1 7f4d 	cmp.w	r1, #820	; 0x334
   8035e:	d333      	bcc.n	803c8 <modifyOutPut+0x70>
		return 0;
		}else if((analogValue >819)&&(analogValue<=1638)){
   80360:	f5a1 724d 	sub.w	r2, r1, #820	; 0x334
   80364:	f240 3332 	movw	r3, #818	; 0x332
   80368:	429a      	cmp	r2, r3
   8036a:	d808      	bhi.n	8037e <modifyOutPut+0x26>
		return (filtervalue*(0.25));
   8036c:	4b17      	ldr	r3, [pc, #92]	; (803cc <modifyOutPut+0x74>)
   8036e:	4798      	blx	r3
   80370:	2200      	movs	r2, #0
   80372:	4b17      	ldr	r3, [pc, #92]	; (803d0 <modifyOutPut+0x78>)
   80374:	4c17      	ldr	r4, [pc, #92]	; (803d4 <modifyOutPut+0x7c>)
   80376:	47a0      	blx	r4
   80378:	4b17      	ldr	r3, [pc, #92]	; (803d8 <modifyOutPut+0x80>)
   8037a:	4798      	blx	r3
   8037c:	bd10      	pop	{r4, pc}
		}else if((analogValue>1638)&&(analogValue<=2457)){
   8037e:	f2a1 6267 	subw	r2, r1, #1639	; 0x667
   80382:	f240 3332 	movw	r3, #818	; 0x332
   80386:	429a      	cmp	r2, r3
   80388:	d808      	bhi.n	8039c <modifyOutPut+0x44>
		return (filtervalue*(0.5));
   8038a:	4b10      	ldr	r3, [pc, #64]	; (803cc <modifyOutPut+0x74>)
   8038c:	4798      	blx	r3
   8038e:	2200      	movs	r2, #0
   80390:	4b12      	ldr	r3, [pc, #72]	; (803dc <modifyOutPut+0x84>)
   80392:	4c10      	ldr	r4, [pc, #64]	; (803d4 <modifyOutPut+0x7c>)
   80394:	47a0      	blx	r4
   80396:	4b10      	ldr	r3, [pc, #64]	; (803d8 <modifyOutPut+0x80>)
   80398:	4798      	blx	r3
   8039a:	bd10      	pop	{r4, pc}
		}else if((analogValue>2457)&&(analogValue<3276)){
   8039c:	f6a1 129a 	subw	r2, r1, #2458	; 0x99a
   803a0:	f240 3331 	movw	r3, #817	; 0x331
   803a4:	429a      	cmp	r2, r3
   803a6:	d808      	bhi.n	803ba <modifyOutPut+0x62>
		return (filtervalue*(0.75));
   803a8:	4b08      	ldr	r3, [pc, #32]	; (803cc <modifyOutPut+0x74>)
   803aa:	4798      	blx	r3
   803ac:	2200      	movs	r2, #0
   803ae:	4b0c      	ldr	r3, [pc, #48]	; (803e0 <modifyOutPut+0x88>)
   803b0:	4c08      	ldr	r4, [pc, #32]	; (803d4 <modifyOutPut+0x7c>)
   803b2:	47a0      	blx	r4
   803b4:	4b08      	ldr	r3, [pc, #32]	; (803d8 <modifyOutPut+0x80>)
   803b6:	4798      	blx	r3
   803b8:	bd10      	pop	{r4, pc}
		}else if((analogValue>3276)&&(analogValue<4095)){
   803ba:	f6a1 41cd 	subw	r1, r1, #3277	; 0xccd
   803be:	f240 3331 	movw	r3, #817	; 0x331
   803c2:	4299      	cmp	r1, r3
   803c4:	d901      	bls.n	803ca <modifyOutPut+0x72>
		return filtervalue;
		}
   803c6:	bd10      	pop	{r4, pc}

//Modify filtervalue based on potentiometer
uint32_t modifyOutPut(uint32_t filtervalue,uint32_t analogValue){

	if(analogValue <= 819){
		return 0;
   803c8:	2000      	movs	r0, #0
		}else if((analogValue>2457)&&(analogValue<3276)){
		return (filtervalue*(0.75));
		}else if((analogValue>3276)&&(analogValue<4095)){
		return filtervalue;
		}
   803ca:	bd10      	pop	{r4, pc}
   803cc:	00080f7d 	.word	0x00080f7d
   803d0:	3fd00000 	.word	0x3fd00000
   803d4:	00081069 	.word	0x00081069
   803d8:	0008148d 	.word	0x0008148d
   803dc:	3fe00000 	.word	0x3fe00000
   803e0:	3fe80000 	.word	0x3fe80000

000803e4 <TC0_Handler>:

/**
*  Interrupt handler for TC0 interrupt.
*/
void TC0_Handler(void)
{
   803e4:	b570      	push	{r4, r5, r6, lr}
   803e6:	b082      	sub	sp, #8
	uint32_t invalue, outvalue;
	uint32_t out0,out1,out2,out3,out4;
	uint32_t analogpin0,analogpin1,analogpin2,analogpin3;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);			//The compare bit is cleared by reading the register, manual p. 915
   803e8:	2100      	movs	r1, #0
   803ea:	4816      	ldr	r0, [pc, #88]	; (80444 <TC0_Handler+0x60>)
   803ec:	4b16      	ldr	r3, [pc, #88]	; (80448 <TC0_Handler+0x64>)
   803ee:	4798      	blx	r3
   803f0:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   803f2:	9b01      	ldr	r3, [sp, #4]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   803f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   803f8:	4b14      	ldr	r3, [pc, #80]	; (8044c <TC0_Handler+0x68>)
   803fa:	631a      	str	r2, [r3, #48]	; 0x30
	
	ioport_set_pin_level(CHECK_PIN,HIGH);		//put test pin HIGH
	adc_start(ADC);
   803fc:	4814      	ldr	r0, [pc, #80]	; (80450 <TC0_Handler+0x6c>)
   803fe:	4b15      	ldr	r3, [pc, #84]	; (80454 <TC0_Handler+0x70>)
   80400:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  //Wait until DRDY get high
   80402:	4d13      	ldr	r5, [pc, #76]	; (80450 <TC0_Handler+0x6c>)
   80404:	4c14      	ldr	r4, [pc, #80]	; (80458 <TC0_Handler+0x74>)
   80406:	4628      	mov	r0, r5
   80408:	47a0      	blx	r4
   8040a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8040e:	d0fa      	beq.n	80406 <TC0_Handler+0x22>

	invalue=adc_get_channel_value(ADC,ADC_CHANNEL_10);			//get input value
   80410:	4d0f      	ldr	r5, [pc, #60]	; (80450 <TC0_Handler+0x6c>)
   80412:	210a      	movs	r1, #10
   80414:	4628      	mov	r0, r5
   80416:	4c11      	ldr	r4, [pc, #68]	; (8045c <TC0_Handler+0x78>)
   80418:	47a0      	blx	r4
//	out1 = oneAndAHalfToTwokHz(invalue);
//	analogpin1 = adc_get_channel_value(ADC,ADC_CHANNEL_6);
//	out1 = modifyOutPut(out1,analogpin1);
	//
	out2 = 0;
	out2 = twoToTwoAndAHalfkHz(invalue);
   8041a:	4b11      	ldr	r3, [pc, #68]	; (80460 <TC0_Handler+0x7c>)
   8041c:	4798      	blx	r3
   8041e:	4606      	mov	r6, r0
	analogpin2 = adc_get_channel_value(ADC,ADC_CHANNEL_5);
   80420:	2105      	movs	r1, #5
   80422:	4628      	mov	r0, r5
   80424:	47a0      	blx	r4
	out2 = modifyOutPut(out2,analogpin2);
   80426:	4601      	mov	r1, r0
   80428:	4630      	mov	r0, r6
   8042a:	4b0e      	ldr	r3, [pc, #56]	; (80464 <TC0_Handler+0x80>)
   8042c:	4798      	blx	r3
	outvalue = (out0+out1+out2);	
	//***********
	

	
	dacc_write_conversion_data(DACC,outvalue);	//send output value to DAC
   8042e:	4601      	mov	r1, r0
   80430:	480d      	ldr	r0, [pc, #52]	; (80468 <TC0_Handler+0x84>)
   80432:	4b0e      	ldr	r3, [pc, #56]	; (8046c <TC0_Handler+0x88>)
   80434:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80436:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8043a:	4b04      	ldr	r3, [pc, #16]	; (8044c <TC0_Handler+0x68>)
   8043c:	635a      	str	r2, [r3, #52]	; 0x34
	
	ioport_set_pin_level(CHECK_PIN,LOW);		//put test pin LOW
	
}
   8043e:	b002      	add	sp, #8
   80440:	bd70      	pop	{r4, r5, r6, pc}
   80442:	bf00      	nop
   80444:	40080000 	.word	0x40080000
   80448:	00080521 	.word	0x00080521
   8044c:	400e1000 	.word	0x400e1000
   80450:	400c0000 	.word	0x400c0000
   80454:	00080289 	.word	0x00080289
   80458:	000802ad 	.word	0x000802ad
   8045c:	0008029d 	.word	0x0008029d
   80460:	000802b1 	.word	0x000802b1
   80464:	00080359 	.word	0x00080359
   80468:	400c8000 	.word	0x400c8000
   8046c:	00080491 	.word	0x00080491

00080470 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   80470:	2301      	movs	r3, #1
   80472:	6003      	str	r3, [r0, #0]
   80474:	4770      	bx	lr
   80476:	bf00      	nop

00080478 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   80478:	b121      	cbz	r1, 80484 <dacc_set_transfer_mode+0xc>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#else
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   8047a:	6843      	ldr	r3, [r0, #4]
   8047c:	f043 0310 	orr.w	r3, r3, #16
   80480:	6043      	str	r3, [r0, #4]
   80482:	e003      	b.n	8048c <dacc_set_transfer_mode+0x14>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   80484:	6843      	ldr	r3, [r0, #4]
   80486:	f023 0310 	bic.w	r3, r3, #16
   8048a:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   8048c:	2000      	movs	r0, #0
   8048e:	4770      	bx	lr

00080490 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   80490:	6201      	str	r1, [r0, #32]
   80492:	4770      	bx	lr

00080494 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   80494:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   80496:	2901      	cmp	r1, #1
   80498:	d806      	bhi.n	804a8 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
   8049a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   8049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   804a2:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   804a4:	2000      	movs	r0, #0
   804a6:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
   804a8:	2001      	movs	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
   804aa:	4770      	bx	lr

000804ac <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   804ac:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   804ae:	6844      	ldr	r4, [r0, #4]
   804b0:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   804b4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   804b8:	0209      	lsls	r1, r1, #8
   804ba:	b289      	uxth	r1, r1
   804bc:	430c      	orrs	r4, r1
	if (ul_maxs) {
   804be:	b112      	cbz	r2, 804c6 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
   804c0:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
   804c4:	e001      	b.n	804ca <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
   804c6:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   804ca:	061b      	lsls	r3, r3, #24
   804cc:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   804d0:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
   804d2:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
   804d4:	2000      	movs	r0, #0
   804d6:	bc10      	pop	{r4}
   804d8:	4770      	bx	lr
   804da:	bf00      	nop

000804dc <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   804dc:	2901      	cmp	r1, #1
   804de:	d805      	bhi.n	804ec <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   804e0:	2301      	movs	r3, #1
   804e2:	fa03 f101 	lsl.w	r1, r3, r1
   804e6:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   804e8:	2000      	movs	r0, #0
   804ea:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
   804ec:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   804ee:	4770      	bx	lr

000804f0 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   804f0:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   804f2:	0189      	lsls	r1, r1, #6
   804f4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   804f6:	2402      	movs	r4, #2
   804f8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   804fa:	f04f 31ff 	mov.w	r1, #4294967295
   804fe:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80500:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80502:	605a      	str	r2, [r3, #4]
}
   80504:	bc10      	pop	{r4}
   80506:	4770      	bx	lr

00080508 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80508:	0189      	lsls	r1, r1, #6
   8050a:	2305      	movs	r3, #5
   8050c:	5043      	str	r3, [r0, r1]
   8050e:	4770      	bx	lr

00080510 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80510:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80514:	61ca      	str	r2, [r1, #28]
   80516:	4770      	bx	lr

00080518 <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80518:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8051c:	624a      	str	r2, [r1, #36]	; 0x24
   8051e:	4770      	bx	lr

00080520 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80520:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80524:	6a08      	ldr	r0, [r1, #32]
}
   80526:	4770      	bx	lr

00080528 <configure_tc>:

#include <asf.h>
#include "conf_tc.h"

void configure_tc(void)
{
   80528:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   8052a:	201b      	movs	r0, #27
   8052c:	4b0e      	ldr	r3, [pc, #56]	; (80568 <configure_tc+0x40>)
   8052e:	4798      	blx	r3

	/** Configure TC for a 10 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   80530:	4c0e      	ldr	r4, [pc, #56]	; (8056c <configure_tc+0x44>)
   80532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80536:	2100      	movs	r1, #0
   80538:	4620      	mov	r0, r4
   8053a:	4b0d      	ldr	r3, [pc, #52]	; (80570 <configure_tc+0x48>)
   8053c:	4798      	blx	r3
	tc_write_rc(TC0, 0, 2100);					//4200 corresponds to fs = 10 kHz
   8053e:	f640 0234 	movw	r2, #2100	; 0x834
   80542:	2100      	movs	r1, #0
   80544:	4620      	mov	r0, r4
   80546:	4b0b      	ldr	r3, [pc, #44]	; (80574 <configure_tc+0x4c>)
   80548:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8054a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8054e:	4b0a      	ldr	r3, [pc, #40]	; (80578 <configure_tc+0x50>)
   80550:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   80552:	2210      	movs	r2, #16
   80554:	2100      	movs	r1, #0
   80556:	4620      	mov	r0, r4
   80558:	4b08      	ldr	r3, [pc, #32]	; (8057c <configure_tc+0x54>)
   8055a:	4798      	blx	r3

	tc_start(TC0, 0);
   8055c:	2100      	movs	r1, #0
   8055e:	4620      	mov	r0, r4
   80560:	4b07      	ldr	r3, [pc, #28]	; (80580 <configure_tc+0x58>)
   80562:	4798      	blx	r3
   80564:	bd10      	pop	{r4, pc}
   80566:	bf00      	nop
   80568:	00080a51 	.word	0x00080a51
   8056c:	40080000 	.word	0x40080000
   80570:	000804f1 	.word	0x000804f1
   80574:	00080511 	.word	0x00080511
   80578:	e000e100 	.word	0xe000e100
   8057c:	00080519 	.word	0x00080519
   80580:	00080509 	.word	0x00080509

00080584 <main>:
#include "sampel_int.h"



int main (void)
{
   80584:	b508      	push	{r3, lr}

	sysclk_init();
   80586:	4b0d      	ldr	r3, [pc, #52]	; (805bc <main+0x38>)
   80588:	4798      	blx	r3
	board_init();
   8058a:	4b0d      	ldr	r3, [pc, #52]	; (805c0 <main+0x3c>)
   8058c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8058e:	200b      	movs	r0, #11
   80590:	4c0c      	ldr	r4, [pc, #48]	; (805c4 <main+0x40>)
   80592:	47a0      	blx	r4
   80594:	200c      	movs	r0, #12
   80596:	47a0      	blx	r4
   80598:	200d      	movs	r0, #13
   8059a:	47a0      	blx	r4
   8059c:	200e      	movs	r0, #14
   8059e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805a0:	4b09      	ldr	r3, [pc, #36]	; (805c8 <main+0x44>)
   805a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   805a6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_init();
	ioport_set_pin_dir(CHECK_PIN, IOPORT_DIR_OUTPUT);	
	adc_setup();
   805ac:	4b07      	ldr	r3, [pc, #28]	; (805cc <main+0x48>)
   805ae:	4798      	blx	r3
	dac_setup();
   805b0:	4b07      	ldr	r3, [pc, #28]	; (805d0 <main+0x4c>)
   805b2:	4798      	blx	r3
	configure_tc();
   805b4:	4b07      	ldr	r3, [pc, #28]	; (805d4 <main+0x50>)
   805b6:	4798      	blx	r3
   805b8:	e7fe      	b.n	805b8 <main+0x34>
   805ba:	bf00      	nop
   805bc:	000805d9 	.word	0x000805d9
   805c0:	00080639 	.word	0x00080639
   805c4:	00080a51 	.word	0x00080a51
   805c8:	400e1000 	.word	0x400e1000
   805cc:	00080151 	.word	0x00080151
   805d0:	000801c5 	.word	0x000801c5
   805d4:	00080529 	.word	0x00080529

000805d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   805d8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   805da:	480d      	ldr	r0, [pc, #52]	; (80610 <sysclk_init+0x38>)
   805dc:	4b0d      	ldr	r3, [pc, #52]	; (80614 <sysclk_init+0x3c>)
   805de:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   805e0:	213e      	movs	r1, #62	; 0x3e
   805e2:	2000      	movs	r0, #0
   805e4:	4b0c      	ldr	r3, [pc, #48]	; (80618 <sysclk_init+0x40>)
   805e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   805e8:	4c0c      	ldr	r4, [pc, #48]	; (8061c <sysclk_init+0x44>)
   805ea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   805ec:	2800      	cmp	r0, #0
   805ee:	d0fc      	beq.n	805ea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   805f0:	4b0b      	ldr	r3, [pc, #44]	; (80620 <sysclk_init+0x48>)
   805f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   805f4:	4a0b      	ldr	r2, [pc, #44]	; (80624 <sysclk_init+0x4c>)
   805f6:	4b0c      	ldr	r3, [pc, #48]	; (80628 <sysclk_init+0x50>)
   805f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   805fa:	4c0c      	ldr	r4, [pc, #48]	; (8062c <sysclk_init+0x54>)
   805fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   805fe:	2800      	cmp	r0, #0
   80600:	d0fc      	beq.n	805fc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80602:	2010      	movs	r0, #16
   80604:	4b0a      	ldr	r3, [pc, #40]	; (80630 <sysclk_init+0x58>)
   80606:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80608:	4b0a      	ldr	r3, [pc, #40]	; (80634 <sysclk_init+0x5c>)
   8060a:	4798      	blx	r3
   8060c:	bd10      	pop	{r4, pc}
   8060e:	bf00      	nop
   80610:	0501bd00 	.word	0x0501bd00
   80614:	00080c71 	.word	0x00080c71
   80618:	000809cd 	.word	0x000809cd
   8061c:	00080a21 	.word	0x00080a21
   80620:	00080a31 	.word	0x00080a31
   80624:	200d3f01 	.word	0x200d3f01
   80628:	400e0600 	.word	0x400e0600
   8062c:	00080a41 	.word	0x00080a41
   80630:	00080965 	.word	0x00080965
   80634:	00080b55 	.word	0x00080b55

00080638 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80638:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8063a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8063e:	4b17      	ldr	r3, [pc, #92]	; (8069c <board_init+0x64>)
   80640:	605a      	str	r2, [r3, #4]
   80642:	200b      	movs	r0, #11
   80644:	4c16      	ldr	r4, [pc, #88]	; (806a0 <board_init+0x68>)
   80646:	47a0      	blx	r4
   80648:	200c      	movs	r0, #12
   8064a:	47a0      	blx	r4
   8064c:	200d      	movs	r0, #13
   8064e:	47a0      	blx	r4
   80650:	200e      	movs	r0, #14
   80652:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80654:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80658:	203b      	movs	r0, #59	; 0x3b
   8065a:	4c12      	ldr	r4, [pc, #72]	; (806a4 <board_init+0x6c>)
   8065c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8065e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80662:	2055      	movs	r0, #85	; 0x55
   80664:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80666:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8066a:	2056      	movs	r0, #86	; 0x56
   8066c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8066e:	490e      	ldr	r1, [pc, #56]	; (806a8 <board_init+0x70>)
   80670:	2068      	movs	r0, #104	; 0x68
   80672:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80674:	490d      	ldr	r1, [pc, #52]	; (806ac <board_init+0x74>)
   80676:	205c      	movs	r0, #92	; 0x5c
   80678:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8067a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8067e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80682:	480b      	ldr	r0, [pc, #44]	; (806b0 <board_init+0x78>)
   80684:	4b0b      	ldr	r3, [pc, #44]	; (806b4 <board_init+0x7c>)
   80686:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80688:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8068c:	202b      	movs	r0, #43	; 0x2b
   8068e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80690:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80694:	202a      	movs	r0, #42	; 0x2a
   80696:	47a0      	blx	r4
   80698:	bd10      	pop	{r4, pc}
   8069a:	bf00      	nop
   8069c:	400e1a50 	.word	0x400e1a50
   806a0:	00080a51 	.word	0x00080a51
   806a4:	0008075d 	.word	0x0008075d
   806a8:	28000079 	.word	0x28000079
   806ac:	28000001 	.word	0x28000001
   806b0:	400e0e00 	.word	0x400e0e00
   806b4:	00080831 	.word	0x00080831

000806b8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   806b8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   806ba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   806be:	d016      	beq.n	806ee <pio_set_peripheral+0x36>
   806c0:	d804      	bhi.n	806cc <pio_set_peripheral+0x14>
   806c2:	b1c1      	cbz	r1, 806f6 <pio_set_peripheral+0x3e>
   806c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   806c8:	d00a      	beq.n	806e0 <pio_set_peripheral+0x28>
   806ca:	e013      	b.n	806f4 <pio_set_peripheral+0x3c>
   806cc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   806d0:	d011      	beq.n	806f6 <pio_set_peripheral+0x3e>
   806d2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   806d6:	d00e      	beq.n	806f6 <pio_set_peripheral+0x3e>
   806d8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   806dc:	d10a      	bne.n	806f4 <pio_set_peripheral+0x3c>
   806de:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   806e0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   806e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
   806e4:	400b      	ands	r3, r1
   806e6:	ea23 0302 	bic.w	r3, r3, r2
   806ea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   806ec:	e002      	b.n	806f4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   806ee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   806f0:	4313      	orrs	r3, r2
   806f2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   806f4:	6042      	str	r2, [r0, #4]
   806f6:	4770      	bx	lr

000806f8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   806f8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806fa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   806fe:	bf14      	ite	ne
   80700:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80702:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80704:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80708:	bf14      	ite	ne
   8070a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8070c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8070e:	f012 0f02 	tst.w	r2, #2
   80712:	d002      	beq.n	8071a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80714:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80718:	e004      	b.n	80724 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8071a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_SCIFSR = ul_mask;
   8071e:	bf18      	it	ne
   80720:	f8c0 1080 	strne.w	r1, [r0, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80724:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80726:	6001      	str	r1, [r0, #0]
   80728:	4770      	bx	lr
   8072a:	bf00      	nop

0008072c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8072c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8072e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80730:	9c01      	ldr	r4, [sp, #4]
   80732:	b10c      	cbz	r4, 80738 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80734:	6641      	str	r1, [r0, #100]	; 0x64
   80736:	e000      	b.n	8073a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80738:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8073a:	b10b      	cbz	r3, 80740 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8073c:	6501      	str	r1, [r0, #80]	; 0x50
   8073e:	e000      	b.n	80742 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80740:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80742:	b10a      	cbz	r2, 80748 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80744:	6301      	str	r1, [r0, #48]	; 0x30
   80746:	e000      	b.n	8074a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80748:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8074a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8074c:	6001      	str	r1, [r0, #0]
}
   8074e:	bc10      	pop	{r4}
   80750:	4770      	bx	lr
   80752:	bf00      	nop

00080754 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80754:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80756:	4770      	bx	lr

00080758 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80758:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8075a:	4770      	bx	lr

0008075c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8075c:	b570      	push	{r4, r5, r6, lr}
   8075e:	b082      	sub	sp, #8
   80760:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80762:	0943      	lsrs	r3, r0, #5
   80764:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80768:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8076c:	025c      	lsls	r4, r3, #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8076e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80772:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80776:	d030      	beq.n	807da <pio_configure_pin+0x7e>
   80778:	d806      	bhi.n	80788 <pio_configure_pin+0x2c>
   8077a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8077e:	d00a      	beq.n	80796 <pio_configure_pin+0x3a>
   80780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80784:	d018      	beq.n	807b8 <pio_configure_pin+0x5c>
   80786:	e049      	b.n	8081c <pio_configure_pin+0xc0>
   80788:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8078c:	d030      	beq.n	807f0 <pio_configure_pin+0x94>
   8078e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80792:	d02d      	beq.n	807f0 <pio_configure_pin+0x94>
   80794:	e042      	b.n	8081c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80796:	f000 001f 	and.w	r0, r0, #31
   8079a:	2601      	movs	r6, #1
   8079c:	4086      	lsls	r6, r0
   8079e:	4632      	mov	r2, r6
   807a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807a4:	4620      	mov	r0, r4
   807a6:	4b1f      	ldr	r3, [pc, #124]	; (80824 <pio_configure_pin+0xc8>)
   807a8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   807ae:	bf14      	ite	ne
   807b0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807b2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   807b4:	2001      	movs	r0, #1
   807b6:	e032      	b.n	8081e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   807b8:	f000 001f 	and.w	r0, r0, #31
   807bc:	2601      	movs	r6, #1
   807be:	4086      	lsls	r6, r0
   807c0:	4632      	mov	r2, r6
   807c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807c6:	4620      	mov	r0, r4
   807c8:	4b16      	ldr	r3, [pc, #88]	; (80824 <pio_configure_pin+0xc8>)
   807ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   807d0:	bf14      	ite	ne
   807d2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807d4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   807d6:	2001      	movs	r0, #1
   807d8:	e021      	b.n	8081e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   807da:	f000 011f 	and.w	r1, r0, #31
   807de:	2601      	movs	r6, #1
   807e0:	462a      	mov	r2, r5
   807e2:	fa06 f101 	lsl.w	r1, r6, r1
   807e6:	4620      	mov	r0, r4
   807e8:	4b0f      	ldr	r3, [pc, #60]	; (80828 <pio_configure_pin+0xcc>)
   807ea:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   807ec:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   807ee:	e016      	b.n	8081e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   807f0:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   807f4:	f000 011f 	and.w	r1, r0, #31
   807f8:	2601      	movs	r6, #1
   807fa:	ea05 0306 	and.w	r3, r5, r6
   807fe:	9300      	str	r3, [sp, #0]
   80800:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80804:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80808:	bf14      	ite	ne
   8080a:	2200      	movne	r2, #0
   8080c:	2201      	moveq	r2, #1
   8080e:	fa06 f101 	lsl.w	r1, r6, r1
   80812:	4620      	mov	r0, r4
   80814:	4c05      	ldr	r4, [pc, #20]	; (8082c <pio_configure_pin+0xd0>)
   80816:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80818:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8081a:	e000      	b.n	8081e <pio_configure_pin+0xc2>

	default:
		return 0;
   8081c:	2000      	movs	r0, #0
	}

	return 1;
}
   8081e:	b002      	add	sp, #8
   80820:	bd70      	pop	{r4, r5, r6, pc}
   80822:	bf00      	nop
   80824:	000806b9 	.word	0x000806b9
   80828:	000806f9 	.word	0x000806f9
   8082c:	0008072d 	.word	0x0008072d

00080830 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80830:	b570      	push	{r4, r5, r6, lr}
   80832:	b082      	sub	sp, #8
   80834:	4605      	mov	r5, r0
   80836:	460e      	mov	r6, r1
   80838:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8083a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8083e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80842:	d026      	beq.n	80892 <pio_configure_pin_group+0x62>
   80844:	d806      	bhi.n	80854 <pio_configure_pin_group+0x24>
   80846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8084a:	d00a      	beq.n	80862 <pio_configure_pin_group+0x32>
   8084c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80850:	d013      	beq.n	8087a <pio_configure_pin_group+0x4a>
   80852:	e034      	b.n	808be <pio_configure_pin_group+0x8e>
   80854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80858:	d01f      	beq.n	8089a <pio_configure_pin_group+0x6a>
   8085a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8085e:	d01c      	beq.n	8089a <pio_configure_pin_group+0x6a>
   80860:	e02d      	b.n	808be <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80862:	460a      	mov	r2, r1
   80864:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80868:	4b16      	ldr	r3, [pc, #88]	; (808c4 <pio_configure_pin_group+0x94>)
   8086a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8086c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80870:	bf14      	ite	ne
   80872:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80874:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80876:	2001      	movs	r0, #1
   80878:	e022      	b.n	808c0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8087a:	460a      	mov	r2, r1
   8087c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80880:	4b10      	ldr	r3, [pc, #64]	; (808c4 <pio_configure_pin_group+0x94>)
   80882:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80884:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80888:	bf14      	ite	ne
   8088a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8088c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8088e:	2001      	movs	r0, #1
   80890:	e016      	b.n	808c0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80892:	4b0d      	ldr	r3, [pc, #52]	; (808c8 <pio_configure_pin_group+0x98>)
   80894:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80896:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80898:	e012      	b.n	808c0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8089a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   8089e:	f004 0301 	and.w	r3, r4, #1
   808a2:	9300      	str	r3, [sp, #0]
   808a4:	f3c4 0380 	ubfx	r3, r4, #2, #1
   808a8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808ac:	bf14      	ite	ne
   808ae:	2200      	movne	r2, #0
   808b0:	2201      	moveq	r2, #1
   808b2:	4631      	mov	r1, r6
   808b4:	4628      	mov	r0, r5
   808b6:	4c05      	ldr	r4, [pc, #20]	; (808cc <pio_configure_pin_group+0x9c>)
   808b8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   808ba:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   808bc:	e000      	b.n	808c0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   808be:	2000      	movs	r0, #0
	}

	return 1;
}
   808c0:	b002      	add	sp, #8
   808c2:	bd70      	pop	{r4, r5, r6, pc}
   808c4:	000806b9 	.word	0x000806b9
   808c8:	000806f9 	.word	0x000806f9
   808cc:	0008072d 	.word	0x0008072d

000808d0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   808d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808d2:	4604      	mov	r4, r0
   808d4:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   808d6:	4b0c      	ldr	r3, [pc, #48]	; (80908 <pio_handler_process+0x38>)
   808d8:	4798      	blx	r3
   808da:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   808dc:	4620      	mov	r0, r4
   808de:	4b0b      	ldr	r3, [pc, #44]	; (8090c <pio_handler_process+0x3c>)
   808e0:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   808e2:	4005      	ands	r5, r0
   808e4:	d00f      	beq.n	80906 <pio_handler_process+0x36>
   808e6:	4c0a      	ldr	r4, [pc, #40]	; (80910 <pio_handler_process+0x40>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   808e8:	6823      	ldr	r3, [r4, #0]
   808ea:	42b3      	cmp	r3, r6
   808ec:	d108      	bne.n	80900 <pio_handler_process+0x30>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   808ee:	6861      	ldr	r1, [r4, #4]
   808f0:	4229      	tst	r1, r5
   808f2:	d005      	beq.n	80900 <pio_handler_process+0x30>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   808f4:	68e3      	ldr	r3, [r4, #12]
   808f6:	4630      	mov	r0, r6
   808f8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   808fa:	6863      	ldr	r3, [r4, #4]
   808fc:	ea25 0503 	bic.w	r5, r5, r3
   80900:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80902:	2d00      	cmp	r5, #0
   80904:	d1f0      	bne.n	808e8 <pio_handler_process+0x18>
   80906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80908:	00080755 	.word	0x00080755
   8090c:	00080759 	.word	0x00080759
   80910:	2007048c 	.word	0x2007048c

00080914 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80914:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80916:	210b      	movs	r1, #11
   80918:	4801      	ldr	r0, [pc, #4]	; (80920 <PIOA_Handler+0xc>)
   8091a:	4b02      	ldr	r3, [pc, #8]	; (80924 <PIOA_Handler+0x10>)
   8091c:	4798      	blx	r3
   8091e:	bd08      	pop	{r3, pc}
   80920:	400e0e00 	.word	0x400e0e00
   80924:	000808d1 	.word	0x000808d1

00080928 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80928:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8092a:	210c      	movs	r1, #12
   8092c:	4801      	ldr	r0, [pc, #4]	; (80934 <PIOB_Handler+0xc>)
   8092e:	4b02      	ldr	r3, [pc, #8]	; (80938 <PIOB_Handler+0x10>)
   80930:	4798      	blx	r3
   80932:	bd08      	pop	{r3, pc}
   80934:	400e1000 	.word	0x400e1000
   80938:	000808d1 	.word	0x000808d1

0008093c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8093c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8093e:	210d      	movs	r1, #13
   80940:	4801      	ldr	r0, [pc, #4]	; (80948 <PIOC_Handler+0xc>)
   80942:	4b02      	ldr	r3, [pc, #8]	; (8094c <PIOC_Handler+0x10>)
   80944:	4798      	blx	r3
   80946:	bd08      	pop	{r3, pc}
   80948:	400e1200 	.word	0x400e1200
   8094c:	000808d1 	.word	0x000808d1

00080950 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80950:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80952:	210e      	movs	r1, #14
   80954:	4801      	ldr	r0, [pc, #4]	; (8095c <PIOD_Handler+0xc>)
   80956:	4b02      	ldr	r3, [pc, #8]	; (80960 <PIOD_Handler+0x10>)
   80958:	4798      	blx	r3
   8095a:	bd08      	pop	{r3, pc}
   8095c:	400e1400 	.word	0x400e1400
   80960:	000808d1 	.word	0x000808d1

00080964 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80964:	4a18      	ldr	r2, [pc, #96]	; (809c8 <pmc_switch_mck_to_pllack+0x64>)
   80966:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8096c:	4318      	orrs	r0, r3
   8096e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80970:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80972:	f013 0f08 	tst.w	r3, #8
   80976:	d003      	beq.n	80980 <pmc_switch_mck_to_pllack+0x1c>
   80978:	e009      	b.n	8098e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8097a:	3b01      	subs	r3, #1
   8097c:	d103      	bne.n	80986 <pmc_switch_mck_to_pllack+0x22>
   8097e:	e01e      	b.n	809be <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80980:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80984:	4910      	ldr	r1, [pc, #64]	; (809c8 <pmc_switch_mck_to_pllack+0x64>)
   80986:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80988:	f012 0f08 	tst.w	r2, #8
   8098c:	d0f5      	beq.n	8097a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8098e:	4a0e      	ldr	r2, [pc, #56]	; (809c8 <pmc_switch_mck_to_pllack+0x64>)
   80990:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80992:	f023 0303 	bic.w	r3, r3, #3
   80996:	f043 0302 	orr.w	r3, r3, #2
   8099a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8099c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8099e:	f010 0008 	ands.w	r0, r0, #8
   809a2:	d004      	beq.n	809ae <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   809a4:	2000      	movs	r0, #0
   809a6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   809a8:	3b01      	subs	r3, #1
   809aa:	d103      	bne.n	809b4 <pmc_switch_mck_to_pllack+0x50>
   809ac:	e009      	b.n	809c2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809b2:	4905      	ldr	r1, [pc, #20]	; (809c8 <pmc_switch_mck_to_pllack+0x64>)
   809b4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   809b6:	f012 0f08 	tst.w	r2, #8
   809ba:	d0f5      	beq.n	809a8 <pmc_switch_mck_to_pllack+0x44>
   809bc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   809be:	2001      	movs	r0, #1
   809c0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   809c2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop
   809c8:	400e0600 	.word	0x400e0600

000809cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   809cc:	b138      	cbz	r0, 809de <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809ce:	4911      	ldr	r1, [pc, #68]	; (80a14 <pmc_switch_mainck_to_xtal+0x48>)
   809d0:	6a0b      	ldr	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   809d2:	4a11      	ldr	r2, [pc, #68]	; (80a18 <pmc_switch_mainck_to_xtal+0x4c>)
   809d4:	401a      	ands	r2, r3
   809d6:	4b11      	ldr	r3, [pc, #68]	; (80a1c <pmc_switch_mainck_to_xtal+0x50>)
   809d8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809da:	620b      	str	r3, [r1, #32]
   809dc:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809de:	480d      	ldr	r0, [pc, #52]	; (80a14 <pmc_switch_mainck_to_xtal+0x48>)
   809e0:	6a02      	ldr	r2, [r0, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   809e2:	0209      	lsls	r1, r1, #8
   809e4:	b289      	uxth	r1, r1
   809e6:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   809ea:	f023 0303 	bic.w	r3, r3, #3
   809ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   809f2:	f043 0301 	orr.w	r3, r3, #1
   809f6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809f8:	6203      	str	r3, [r0, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   809fa:	4602      	mov	r2, r0
   809fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809fe:	f013 0f01 	tst.w	r3, #1
   80a02:	d0fb      	beq.n	809fc <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80a04:	4a03      	ldr	r2, [pc, #12]	; (80a14 <pmc_switch_mainck_to_xtal+0x48>)
   80a06:	6a13      	ldr	r3, [r2, #32]
   80a08:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80a10:	6213      	str	r3, [r2, #32]
   80a12:	4770      	bx	lr
   80a14:	400e0600 	.word	0x400e0600
   80a18:	fec8fffc 	.word	0xfec8fffc
   80a1c:	01370002 	.word	0x01370002

00080a20 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a20:	4b02      	ldr	r3, [pc, #8]	; (80a2c <pmc_osc_is_ready_mainck+0xc>)
   80a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a24:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop
   80a2c:	400e0600 	.word	0x400e0600

00080a30 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80a30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80a34:	4b01      	ldr	r3, [pc, #4]	; (80a3c <pmc_disable_pllack+0xc>)
   80a36:	629a      	str	r2, [r3, #40]	; 0x28
   80a38:	4770      	bx	lr
   80a3a:	bf00      	nop
   80a3c:	400e0600 	.word	0x400e0600

00080a40 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80a40:	4b02      	ldr	r3, [pc, #8]	; (80a4c <pmc_is_locked_pllack+0xc>)
   80a42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a44:	f000 0002 	and.w	r0, r0, #2
   80a48:	4770      	bx	lr
   80a4a:	bf00      	nop
   80a4c:	400e0600 	.word	0x400e0600

00080a50 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80a50:	282c      	cmp	r0, #44	; 0x2c
   80a52:	d81e      	bhi.n	80a92 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80a54:	281f      	cmp	r0, #31
   80a56:	d80c      	bhi.n	80a72 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80a58:	4b11      	ldr	r3, [pc, #68]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a5a:	699a      	ldr	r2, [r3, #24]
   80a5c:	2301      	movs	r3, #1
   80a5e:	4083      	lsls	r3, r0
   80a60:	4393      	bics	r3, r2
   80a62:	d018      	beq.n	80a96 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80a64:	2301      	movs	r3, #1
   80a66:	fa03 f000 	lsl.w	r0, r3, r0
   80a6a:	4b0d      	ldr	r3, [pc, #52]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a6c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a6e:	2000      	movs	r0, #0
   80a70:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80a72:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a74:	4b0a      	ldr	r3, [pc, #40]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80a7a:	2301      	movs	r3, #1
   80a7c:	4083      	lsls	r3, r0
   80a7e:	4393      	bics	r3, r2
   80a80:	d00b      	beq.n	80a9a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80a82:	2301      	movs	r3, #1
   80a84:	fa03 f000 	lsl.w	r0, r3, r0
   80a88:	4b05      	ldr	r3, [pc, #20]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a8a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80a8e:	2000      	movs	r0, #0
   80a90:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80a92:	2001      	movs	r0, #1
   80a94:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a96:	2000      	movs	r0, #0
   80a98:	4770      	bx	lr
   80a9a:	2000      	movs	r0, #0
}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	400e0600 	.word	0x400e0600

00080aa4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80aa4:	e7fe      	b.n	80aa4 <Dummy_Handler>
   80aa6:	bf00      	nop

00080aa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80aa8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80aaa:	4b1e      	ldr	r3, [pc, #120]	; (80b24 <Reset_Handler+0x7c>)
   80aac:	4a1e      	ldr	r2, [pc, #120]	; (80b28 <Reset_Handler+0x80>)
   80aae:	429a      	cmp	r2, r3
   80ab0:	d003      	beq.n	80aba <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80ab2:	4b1e      	ldr	r3, [pc, #120]	; (80b2c <Reset_Handler+0x84>)
   80ab4:	4a1b      	ldr	r2, [pc, #108]	; (80b24 <Reset_Handler+0x7c>)
   80ab6:	429a      	cmp	r2, r3
   80ab8:	d304      	bcc.n	80ac4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80aba:	4b1d      	ldr	r3, [pc, #116]	; (80b30 <Reset_Handler+0x88>)
   80abc:	4a1d      	ldr	r2, [pc, #116]	; (80b34 <Reset_Handler+0x8c>)
   80abe:	429a      	cmp	r2, r3
   80ac0:	d30f      	bcc.n	80ae2 <Reset_Handler+0x3a>
   80ac2:	e01a      	b.n	80afa <Reset_Handler+0x52>
   80ac4:	4917      	ldr	r1, [pc, #92]	; (80b24 <Reset_Handler+0x7c>)
   80ac6:	4b1c      	ldr	r3, [pc, #112]	; (80b38 <Reset_Handler+0x90>)
   80ac8:	1a5b      	subs	r3, r3, r1
   80aca:	f023 0303 	bic.w	r3, r3, #3
   80ace:	3304      	adds	r3, #4
   80ad0:	4a15      	ldr	r2, [pc, #84]	; (80b28 <Reset_Handler+0x80>)
   80ad2:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80ad4:	f852 0b04 	ldr.w	r0, [r2], #4
   80ad8:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80adc:	429a      	cmp	r2, r3
   80ade:	d1f9      	bne.n	80ad4 <Reset_Handler+0x2c>
   80ae0:	e7eb      	b.n	80aba <Reset_Handler+0x12>
   80ae2:	4b16      	ldr	r3, [pc, #88]	; (80b3c <Reset_Handler+0x94>)
   80ae4:	4a16      	ldr	r2, [pc, #88]	; (80b40 <Reset_Handler+0x98>)
   80ae6:	1ad2      	subs	r2, r2, r3
   80ae8:	f022 0203 	bic.w	r2, r2, #3
   80aec:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80aee:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80af0:	2100      	movs	r1, #0
   80af2:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80af6:	4293      	cmp	r3, r2
   80af8:	d1fb      	bne.n	80af2 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80afa:	4b12      	ldr	r3, [pc, #72]	; (80b44 <Reset_Handler+0x9c>)
   80afc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80b00:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80b04:	4910      	ldr	r1, [pc, #64]	; (80b48 <Reset_Handler+0xa0>)
   80b06:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80b08:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80b10:	d203      	bcs.n	80b1a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80b12:	688b      	ldr	r3, [r1, #8]
   80b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80b18:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80b1a:	4b0c      	ldr	r3, [pc, #48]	; (80b4c <Reset_Handler+0xa4>)
   80b1c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80b1e:	4b0c      	ldr	r3, [pc, #48]	; (80b50 <Reset_Handler+0xa8>)
   80b20:	4798      	blx	r3
   80b22:	e7fe      	b.n	80b22 <Reset_Handler+0x7a>
   80b24:	20070000 	.word	0x20070000
   80b28:	0008191c 	.word	0x0008191c
   80b2c:	20070430 	.word	0x20070430
   80b30:	200704fc 	.word	0x200704fc
   80b34:	20070430 	.word	0x20070430
   80b38:	2007042f 	.word	0x2007042f
   80b3c:	20070434 	.word	0x20070434
   80b40:	200704ff 	.word	0x200704ff
   80b44:	00080000 	.word	0x00080000
   80b48:	e000ed00 	.word	0xe000ed00
   80b4c:	00081775 	.word	0x00081775
   80b50:	00080585 	.word	0x00080585

00080b54 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b54:	4b3e      	ldr	r3, [pc, #248]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b58:	f003 0303 	and.w	r3, r3, #3
   80b5c:	2b03      	cmp	r3, #3
   80b5e:	d85f      	bhi.n	80c20 <SystemCoreClockUpdate+0xcc>
   80b60:	e8df f003 	tbb	[pc, r3]
   80b64:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b68:	4b3a      	ldr	r3, [pc, #232]	; (80c54 <SystemCoreClockUpdate+0x100>)
   80b6a:	695b      	ldr	r3, [r3, #20]
   80b6c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b70:	bf14      	ite	ne
   80b72:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b76:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b7a:	4b37      	ldr	r3, [pc, #220]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80b7c:	601a      	str	r2, [r3, #0]
   80b7e:	e04f      	b.n	80c20 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b80:	4b33      	ldr	r3, [pc, #204]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80b82:	6a1b      	ldr	r3, [r3, #32]
   80b84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b88:	d003      	beq.n	80b92 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b8a:	4a34      	ldr	r2, [pc, #208]	; (80c5c <SystemCoreClockUpdate+0x108>)
   80b8c:	4b32      	ldr	r3, [pc, #200]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80b8e:	601a      	str	r2, [r3, #0]
   80b90:	e046      	b.n	80c20 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b92:	4a33      	ldr	r2, [pc, #204]	; (80c60 <SystemCoreClockUpdate+0x10c>)
   80b94:	4b30      	ldr	r3, [pc, #192]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80b96:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b98:	4b2d      	ldr	r3, [pc, #180]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80b9a:	6a1b      	ldr	r3, [r3, #32]
   80b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ba0:	2b10      	cmp	r3, #16
   80ba2:	d002      	beq.n	80baa <SystemCoreClockUpdate+0x56>
   80ba4:	2b20      	cmp	r3, #32
   80ba6:	d004      	beq.n	80bb2 <SystemCoreClockUpdate+0x5e>
   80ba8:	e03a      	b.n	80c20 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80baa:	4a2e      	ldr	r2, [pc, #184]	; (80c64 <SystemCoreClockUpdate+0x110>)
   80bac:	4b2a      	ldr	r3, [pc, #168]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80bae:	601a      	str	r2, [r3, #0]
				break;
   80bb0:	e036      	b.n	80c20 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80bb2:	4a2a      	ldr	r2, [pc, #168]	; (80c5c <SystemCoreClockUpdate+0x108>)
   80bb4:	4b28      	ldr	r3, [pc, #160]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80bb6:	601a      	str	r2, [r3, #0]
				break;
   80bb8:	e032      	b.n	80c20 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80bba:	4b25      	ldr	r3, [pc, #148]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80bbc:	6a1b      	ldr	r3, [r3, #32]
   80bbe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80bc2:	d003      	beq.n	80bcc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80bc4:	4a25      	ldr	r2, [pc, #148]	; (80c5c <SystemCoreClockUpdate+0x108>)
   80bc6:	4b24      	ldr	r3, [pc, #144]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80bc8:	601a      	str	r2, [r3, #0]
   80bca:	e012      	b.n	80bf2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80bcc:	4a24      	ldr	r2, [pc, #144]	; (80c60 <SystemCoreClockUpdate+0x10c>)
   80bce:	4b22      	ldr	r3, [pc, #136]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80bd0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80bd2:	4b1f      	ldr	r3, [pc, #124]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80bd4:	6a1b      	ldr	r3, [r3, #32]
   80bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80bda:	2b10      	cmp	r3, #16
   80bdc:	d002      	beq.n	80be4 <SystemCoreClockUpdate+0x90>
   80bde:	2b20      	cmp	r3, #32
   80be0:	d004      	beq.n	80bec <SystemCoreClockUpdate+0x98>
   80be2:	e006      	b.n	80bf2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80be4:	4a1f      	ldr	r2, [pc, #124]	; (80c64 <SystemCoreClockUpdate+0x110>)
   80be6:	4b1c      	ldr	r3, [pc, #112]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80be8:	601a      	str	r2, [r3, #0]
				break;
   80bea:	e002      	b.n	80bf2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80bec:	4a1b      	ldr	r2, [pc, #108]	; (80c5c <SystemCoreClockUpdate+0x108>)
   80bee:	4b1a      	ldr	r3, [pc, #104]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80bf0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80bf2:	4b17      	ldr	r3, [pc, #92]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bf6:	f003 0303 	and.w	r3, r3, #3
   80bfa:	2b02      	cmp	r3, #2
   80bfc:	d10d      	bne.n	80c1a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bfe:	4a14      	ldr	r2, [pc, #80]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80c00:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c02:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80c04:	4814      	ldr	r0, [pc, #80]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80c06:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80c0a:	6803      	ldr	r3, [r0, #0]
   80c0c:	fb01 3303 	mla	r3, r1, r3, r3
   80c10:	b2d2      	uxtb	r2, r2
   80c12:	fbb3 f3f2 	udiv	r3, r3, r2
   80c16:	6003      	str	r3, [r0, #0]
   80c18:	e002      	b.n	80c20 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80c1a:	4a13      	ldr	r2, [pc, #76]	; (80c68 <SystemCoreClockUpdate+0x114>)
   80c1c:	4b0e      	ldr	r3, [pc, #56]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80c1e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80c20:	4b0b      	ldr	r3, [pc, #44]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c28:	2b70      	cmp	r3, #112	; 0x70
   80c2a:	d107      	bne.n	80c3c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80c2c:	4a0a      	ldr	r2, [pc, #40]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80c2e:	6813      	ldr	r3, [r2, #0]
   80c30:	490e      	ldr	r1, [pc, #56]	; (80c6c <SystemCoreClockUpdate+0x118>)
   80c32:	fba1 1303 	umull	r1, r3, r1, r3
   80c36:	085b      	lsrs	r3, r3, #1
   80c38:	6013      	str	r3, [r2, #0]
   80c3a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80c3c:	4b04      	ldr	r3, [pc, #16]	; (80c50 <SystemCoreClockUpdate+0xfc>)
   80c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c40:	4905      	ldr	r1, [pc, #20]	; (80c58 <SystemCoreClockUpdate+0x104>)
   80c42:	f3c3 1202 	ubfx	r2, r3, #4, #3
   80c46:	680b      	ldr	r3, [r1, #0]
   80c48:	40d3      	lsrs	r3, r2
   80c4a:	600b      	str	r3, [r1, #0]
   80c4c:	4770      	bx	lr
   80c4e:	bf00      	nop
   80c50:	400e0600 	.word	0x400e0600
   80c54:	400e1a10 	.word	0x400e1a10
   80c58:	20070000 	.word	0x20070000
   80c5c:	00b71b00 	.word	0x00b71b00
   80c60:	003d0900 	.word	0x003d0900
   80c64:	007a1200 	.word	0x007a1200
   80c68:	0e4e1c00 	.word	0x0e4e1c00
   80c6c:	aaaaaaab 	.word	0xaaaaaaab

00080c70 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80c70:	4b1b      	ldr	r3, [pc, #108]	; (80ce0 <system_init_flash+0x70>)
   80c72:	4298      	cmp	r0, r3
   80c74:	d806      	bhi.n	80c84 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80c76:	2300      	movs	r3, #0
   80c78:	4a1a      	ldr	r2, [pc, #104]	; (80ce4 <system_init_flash+0x74>)
   80c7a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80c7c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80c80:	6013      	str	r3, [r2, #0]
   80c82:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80c84:	4b18      	ldr	r3, [pc, #96]	; (80ce8 <system_init_flash+0x78>)
   80c86:	4298      	cmp	r0, r3
   80c88:	d807      	bhi.n	80c9a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
   80c8e:	4a15      	ldr	r2, [pc, #84]	; (80ce4 <system_init_flash+0x74>)
   80c90:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80c92:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80c96:	6013      	str	r3, [r2, #0]
   80c98:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80c9a:	4b14      	ldr	r3, [pc, #80]	; (80cec <system_init_flash+0x7c>)
   80c9c:	4298      	cmp	r0, r3
   80c9e:	d807      	bhi.n	80cb0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
   80ca4:	4a0f      	ldr	r2, [pc, #60]	; (80ce4 <system_init_flash+0x74>)
   80ca6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80ca8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80cac:	6013      	str	r3, [r2, #0]
   80cae:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80cb0:	4b0f      	ldr	r3, [pc, #60]	; (80cf0 <system_init_flash+0x80>)
   80cb2:	4298      	cmp	r0, r3
   80cb4:	d807      	bhi.n	80cc6 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
   80cba:	4a0a      	ldr	r2, [pc, #40]	; (80ce4 <system_init_flash+0x74>)
   80cbc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80cbe:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80cc2:	6013      	str	r3, [r2, #0]
   80cc4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   80cc6:	4b0b      	ldr	r3, [pc, #44]	; (80cf4 <system_init_flash+0x84>)
   80cc8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80cca:	bf94      	ite	ls
   80ccc:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   80cd0:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   80cd4:	4a03      	ldr	r2, [pc, #12]	; (80ce4 <system_init_flash+0x74>)
   80cd6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   80cd8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80cdc:	6013      	str	r3, [r2, #0]
   80cde:	4770      	bx	lr
   80ce0:	0121eabf 	.word	0x0121eabf
   80ce4:	400e0a00 	.word	0x400e0a00
   80ce8:	02faf07f 	.word	0x02faf07f
   80cec:	03d08fff 	.word	0x03d08fff
   80cf0:	04c4b3ff 	.word	0x04c4b3ff
   80cf4:	055d4a7f 	.word	0x055d4a7f

00080cf8 <__aeabi_drsub>:
   80cf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80cfc:	e002      	b.n	80d04 <__adddf3>
   80cfe:	bf00      	nop

00080d00 <__aeabi_dsub>:
   80d00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080d04 <__adddf3>:
   80d04:	b530      	push	{r4, r5, lr}
   80d06:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80d0a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80d0e:	ea94 0f05 	teq	r4, r5
   80d12:	bf08      	it	eq
   80d14:	ea90 0f02 	teqeq	r0, r2
   80d18:	bf1f      	itttt	ne
   80d1a:	ea54 0c00 	orrsne.w	ip, r4, r0
   80d1e:	ea55 0c02 	orrsne.w	ip, r5, r2
   80d22:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80d26:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80d2a:	f000 80e2 	beq.w	80ef2 <__adddf3+0x1ee>
   80d2e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80d32:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80d36:	bfb8      	it	lt
   80d38:	426d      	neglt	r5, r5
   80d3a:	dd0c      	ble.n	80d56 <__adddf3+0x52>
   80d3c:	442c      	add	r4, r5
   80d3e:	ea80 0202 	eor.w	r2, r0, r2
   80d42:	ea81 0303 	eor.w	r3, r1, r3
   80d46:	ea82 0000 	eor.w	r0, r2, r0
   80d4a:	ea83 0101 	eor.w	r1, r3, r1
   80d4e:	ea80 0202 	eor.w	r2, r0, r2
   80d52:	ea81 0303 	eor.w	r3, r1, r3
   80d56:	2d36      	cmp	r5, #54	; 0x36
   80d58:	bf88      	it	hi
   80d5a:	bd30      	pophi	{r4, r5, pc}
   80d5c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80d60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80d64:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80d68:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80d6c:	d002      	beq.n	80d74 <__adddf3+0x70>
   80d6e:	4240      	negs	r0, r0
   80d70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80d74:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80d78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80d7c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80d80:	d002      	beq.n	80d88 <__adddf3+0x84>
   80d82:	4252      	negs	r2, r2
   80d84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80d88:	ea94 0f05 	teq	r4, r5
   80d8c:	f000 80a7 	beq.w	80ede <__adddf3+0x1da>
   80d90:	f1a4 0401 	sub.w	r4, r4, #1
   80d94:	f1d5 0e20 	rsbs	lr, r5, #32
   80d98:	db0d      	blt.n	80db6 <__adddf3+0xb2>
   80d9a:	fa02 fc0e 	lsl.w	ip, r2, lr
   80d9e:	fa22 f205 	lsr.w	r2, r2, r5
   80da2:	1880      	adds	r0, r0, r2
   80da4:	f141 0100 	adc.w	r1, r1, #0
   80da8:	fa03 f20e 	lsl.w	r2, r3, lr
   80dac:	1880      	adds	r0, r0, r2
   80dae:	fa43 f305 	asr.w	r3, r3, r5
   80db2:	4159      	adcs	r1, r3
   80db4:	e00e      	b.n	80dd4 <__adddf3+0xd0>
   80db6:	f1a5 0520 	sub.w	r5, r5, #32
   80dba:	f10e 0e20 	add.w	lr, lr, #32
   80dbe:	2a01      	cmp	r2, #1
   80dc0:	fa03 fc0e 	lsl.w	ip, r3, lr
   80dc4:	bf28      	it	cs
   80dc6:	f04c 0c02 	orrcs.w	ip, ip, #2
   80dca:	fa43 f305 	asr.w	r3, r3, r5
   80dce:	18c0      	adds	r0, r0, r3
   80dd0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80dd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80dd8:	d507      	bpl.n	80dea <__adddf3+0xe6>
   80dda:	f04f 0e00 	mov.w	lr, #0
   80dde:	f1dc 0c00 	rsbs	ip, ip, #0
   80de2:	eb7e 0000 	sbcs.w	r0, lr, r0
   80de6:	eb6e 0101 	sbc.w	r1, lr, r1
   80dea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80dee:	d31b      	bcc.n	80e28 <__adddf3+0x124>
   80df0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80df4:	d30c      	bcc.n	80e10 <__adddf3+0x10c>
   80df6:	0849      	lsrs	r1, r1, #1
   80df8:	ea5f 0030 	movs.w	r0, r0, rrx
   80dfc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80e00:	f104 0401 	add.w	r4, r4, #1
   80e04:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80e08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80e0c:	f080 809a 	bcs.w	80f44 <__adddf3+0x240>
   80e10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80e14:	bf08      	it	eq
   80e16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80e1a:	f150 0000 	adcs.w	r0, r0, #0
   80e1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e22:	ea41 0105 	orr.w	r1, r1, r5
   80e26:	bd30      	pop	{r4, r5, pc}
   80e28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80e2c:	4140      	adcs	r0, r0
   80e2e:	eb41 0101 	adc.w	r1, r1, r1
   80e32:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80e36:	f1a4 0401 	sub.w	r4, r4, #1
   80e3a:	d1e9      	bne.n	80e10 <__adddf3+0x10c>
   80e3c:	f091 0f00 	teq	r1, #0
   80e40:	bf04      	itt	eq
   80e42:	4601      	moveq	r1, r0
   80e44:	2000      	moveq	r0, #0
   80e46:	fab1 f381 	clz	r3, r1
   80e4a:	bf08      	it	eq
   80e4c:	3320      	addeq	r3, #32
   80e4e:	f1a3 030b 	sub.w	r3, r3, #11
   80e52:	f1b3 0220 	subs.w	r2, r3, #32
   80e56:	da0c      	bge.n	80e72 <__adddf3+0x16e>
   80e58:	320c      	adds	r2, #12
   80e5a:	dd08      	ble.n	80e6e <__adddf3+0x16a>
   80e5c:	f102 0c14 	add.w	ip, r2, #20
   80e60:	f1c2 020c 	rsb	r2, r2, #12
   80e64:	fa01 f00c 	lsl.w	r0, r1, ip
   80e68:	fa21 f102 	lsr.w	r1, r1, r2
   80e6c:	e00c      	b.n	80e88 <__adddf3+0x184>
   80e6e:	f102 0214 	add.w	r2, r2, #20
   80e72:	bfd8      	it	le
   80e74:	f1c2 0c20 	rsble	ip, r2, #32
   80e78:	fa01 f102 	lsl.w	r1, r1, r2
   80e7c:	fa20 fc0c 	lsr.w	ip, r0, ip
   80e80:	bfdc      	itt	le
   80e82:	ea41 010c 	orrle.w	r1, r1, ip
   80e86:	4090      	lslle	r0, r2
   80e88:	1ae4      	subs	r4, r4, r3
   80e8a:	bfa2      	ittt	ge
   80e8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80e90:	4329      	orrge	r1, r5
   80e92:	bd30      	popge	{r4, r5, pc}
   80e94:	ea6f 0404 	mvn.w	r4, r4
   80e98:	3c1f      	subs	r4, #31
   80e9a:	da1c      	bge.n	80ed6 <__adddf3+0x1d2>
   80e9c:	340c      	adds	r4, #12
   80e9e:	dc0e      	bgt.n	80ebe <__adddf3+0x1ba>
   80ea0:	f104 0414 	add.w	r4, r4, #20
   80ea4:	f1c4 0220 	rsb	r2, r4, #32
   80ea8:	fa20 f004 	lsr.w	r0, r0, r4
   80eac:	fa01 f302 	lsl.w	r3, r1, r2
   80eb0:	ea40 0003 	orr.w	r0, r0, r3
   80eb4:	fa21 f304 	lsr.w	r3, r1, r4
   80eb8:	ea45 0103 	orr.w	r1, r5, r3
   80ebc:	bd30      	pop	{r4, r5, pc}
   80ebe:	f1c4 040c 	rsb	r4, r4, #12
   80ec2:	f1c4 0220 	rsb	r2, r4, #32
   80ec6:	fa20 f002 	lsr.w	r0, r0, r2
   80eca:	fa01 f304 	lsl.w	r3, r1, r4
   80ece:	ea40 0003 	orr.w	r0, r0, r3
   80ed2:	4629      	mov	r1, r5
   80ed4:	bd30      	pop	{r4, r5, pc}
   80ed6:	fa21 f004 	lsr.w	r0, r1, r4
   80eda:	4629      	mov	r1, r5
   80edc:	bd30      	pop	{r4, r5, pc}
   80ede:	f094 0f00 	teq	r4, #0
   80ee2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80ee6:	bf06      	itte	eq
   80ee8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80eec:	3401      	addeq	r4, #1
   80eee:	3d01      	subne	r5, #1
   80ef0:	e74e      	b.n	80d90 <__adddf3+0x8c>
   80ef2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80ef6:	bf18      	it	ne
   80ef8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80efc:	d029      	beq.n	80f52 <__adddf3+0x24e>
   80efe:	ea94 0f05 	teq	r4, r5
   80f02:	bf08      	it	eq
   80f04:	ea90 0f02 	teqeq	r0, r2
   80f08:	d005      	beq.n	80f16 <__adddf3+0x212>
   80f0a:	ea54 0c00 	orrs.w	ip, r4, r0
   80f0e:	bf04      	itt	eq
   80f10:	4619      	moveq	r1, r3
   80f12:	4610      	moveq	r0, r2
   80f14:	bd30      	pop	{r4, r5, pc}
   80f16:	ea91 0f03 	teq	r1, r3
   80f1a:	bf1e      	ittt	ne
   80f1c:	2100      	movne	r1, #0
   80f1e:	2000      	movne	r0, #0
   80f20:	bd30      	popne	{r4, r5, pc}
   80f22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80f26:	d105      	bne.n	80f34 <__adddf3+0x230>
   80f28:	0040      	lsls	r0, r0, #1
   80f2a:	4149      	adcs	r1, r1
   80f2c:	bf28      	it	cs
   80f2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80f32:	bd30      	pop	{r4, r5, pc}
   80f34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80f38:	bf3c      	itt	cc
   80f3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80f3e:	bd30      	popcc	{r4, r5, pc}
   80f40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80f48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80f4c:	f04f 0000 	mov.w	r0, #0
   80f50:	bd30      	pop	{r4, r5, pc}
   80f52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80f56:	bf1a      	itte	ne
   80f58:	4619      	movne	r1, r3
   80f5a:	4610      	movne	r0, r2
   80f5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80f60:	bf1c      	itt	ne
   80f62:	460b      	movne	r3, r1
   80f64:	4602      	movne	r2, r0
   80f66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80f6a:	bf06      	itte	eq
   80f6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80f70:	ea91 0f03 	teqeq	r1, r3
   80f74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80f78:	bd30      	pop	{r4, r5, pc}
   80f7a:	bf00      	nop

00080f7c <__aeabi_ui2d>:
   80f7c:	f090 0f00 	teq	r0, #0
   80f80:	bf04      	itt	eq
   80f82:	2100      	moveq	r1, #0
   80f84:	4770      	bxeq	lr
   80f86:	b530      	push	{r4, r5, lr}
   80f88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80f8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80f90:	f04f 0500 	mov.w	r5, #0
   80f94:	f04f 0100 	mov.w	r1, #0
   80f98:	e750      	b.n	80e3c <__adddf3+0x138>
   80f9a:	bf00      	nop

00080f9c <__aeabi_i2d>:
   80f9c:	f090 0f00 	teq	r0, #0
   80fa0:	bf04      	itt	eq
   80fa2:	2100      	moveq	r1, #0
   80fa4:	4770      	bxeq	lr
   80fa6:	b530      	push	{r4, r5, lr}
   80fa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80fac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80fb0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80fb4:	bf48      	it	mi
   80fb6:	4240      	negmi	r0, r0
   80fb8:	f04f 0100 	mov.w	r1, #0
   80fbc:	e73e      	b.n	80e3c <__adddf3+0x138>
   80fbe:	bf00      	nop

00080fc0 <__aeabi_f2d>:
   80fc0:	0042      	lsls	r2, r0, #1
   80fc2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80fc6:	ea4f 0131 	mov.w	r1, r1, rrx
   80fca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80fce:	bf1f      	itttt	ne
   80fd0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80fd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80fd8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80fdc:	4770      	bxne	lr
   80fde:	f092 0f00 	teq	r2, #0
   80fe2:	bf14      	ite	ne
   80fe4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80fe8:	4770      	bxeq	lr
   80fea:	b530      	push	{r4, r5, lr}
   80fec:	f44f 7460 	mov.w	r4, #896	; 0x380
   80ff0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80ff4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80ff8:	e720      	b.n	80e3c <__adddf3+0x138>
   80ffa:	bf00      	nop

00080ffc <__aeabi_ul2d>:
   80ffc:	ea50 0201 	orrs.w	r2, r0, r1
   81000:	bf08      	it	eq
   81002:	4770      	bxeq	lr
   81004:	b530      	push	{r4, r5, lr}
   81006:	f04f 0500 	mov.w	r5, #0
   8100a:	e00a      	b.n	81022 <__aeabi_l2d+0x16>

0008100c <__aeabi_l2d>:
   8100c:	ea50 0201 	orrs.w	r2, r0, r1
   81010:	bf08      	it	eq
   81012:	4770      	bxeq	lr
   81014:	b530      	push	{r4, r5, lr}
   81016:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8101a:	d502      	bpl.n	81022 <__aeabi_l2d+0x16>
   8101c:	4240      	negs	r0, r0
   8101e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81022:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81026:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8102a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8102e:	f43f aedc 	beq.w	80dea <__adddf3+0xe6>
   81032:	f04f 0203 	mov.w	r2, #3
   81036:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8103a:	bf18      	it	ne
   8103c:	3203      	addne	r2, #3
   8103e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81042:	bf18      	it	ne
   81044:	3203      	addne	r2, #3
   81046:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8104a:	f1c2 0320 	rsb	r3, r2, #32
   8104e:	fa00 fc03 	lsl.w	ip, r0, r3
   81052:	fa20 f002 	lsr.w	r0, r0, r2
   81056:	fa01 fe03 	lsl.w	lr, r1, r3
   8105a:	ea40 000e 	orr.w	r0, r0, lr
   8105e:	fa21 f102 	lsr.w	r1, r1, r2
   81062:	4414      	add	r4, r2
   81064:	e6c1      	b.n	80dea <__adddf3+0xe6>
   81066:	bf00      	nop

00081068 <__aeabi_dmul>:
   81068:	b570      	push	{r4, r5, r6, lr}
   8106a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8106e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81072:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81076:	bf1d      	ittte	ne
   81078:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8107c:	ea94 0f0c 	teqne	r4, ip
   81080:	ea95 0f0c 	teqne	r5, ip
   81084:	f000 f8de 	bleq	81244 <__aeabi_dmul+0x1dc>
   81088:	442c      	add	r4, r5
   8108a:	ea81 0603 	eor.w	r6, r1, r3
   8108e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81092:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81096:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8109a:	bf18      	it	ne
   8109c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   810a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   810a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   810a8:	d038      	beq.n	8111c <__aeabi_dmul+0xb4>
   810aa:	fba0 ce02 	umull	ip, lr, r0, r2
   810ae:	f04f 0500 	mov.w	r5, #0
   810b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   810b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   810ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   810be:	f04f 0600 	mov.w	r6, #0
   810c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   810c6:	f09c 0f00 	teq	ip, #0
   810ca:	bf18      	it	ne
   810cc:	f04e 0e01 	orrne.w	lr, lr, #1
   810d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   810d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   810d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   810dc:	d204      	bcs.n	810e8 <__aeabi_dmul+0x80>
   810de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   810e2:	416d      	adcs	r5, r5
   810e4:	eb46 0606 	adc.w	r6, r6, r6
   810e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   810ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   810f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   810f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   810f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   810fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81100:	bf88      	it	hi
   81102:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81106:	d81e      	bhi.n	81146 <__aeabi_dmul+0xde>
   81108:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8110c:	bf08      	it	eq
   8110e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81112:	f150 0000 	adcs.w	r0, r0, #0
   81116:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8111a:	bd70      	pop	{r4, r5, r6, pc}
   8111c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81120:	ea46 0101 	orr.w	r1, r6, r1
   81124:	ea40 0002 	orr.w	r0, r0, r2
   81128:	ea81 0103 	eor.w	r1, r1, r3
   8112c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81130:	bfc2      	ittt	gt
   81132:	ebd4 050c 	rsbsgt	r5, r4, ip
   81136:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8113a:	bd70      	popgt	{r4, r5, r6, pc}
   8113c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81140:	f04f 0e00 	mov.w	lr, #0
   81144:	3c01      	subs	r4, #1
   81146:	f300 80ab 	bgt.w	812a0 <__aeabi_dmul+0x238>
   8114a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8114e:	bfde      	ittt	le
   81150:	2000      	movle	r0, #0
   81152:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81156:	bd70      	pople	{r4, r5, r6, pc}
   81158:	f1c4 0400 	rsb	r4, r4, #0
   8115c:	3c20      	subs	r4, #32
   8115e:	da35      	bge.n	811cc <__aeabi_dmul+0x164>
   81160:	340c      	adds	r4, #12
   81162:	dc1b      	bgt.n	8119c <__aeabi_dmul+0x134>
   81164:	f104 0414 	add.w	r4, r4, #20
   81168:	f1c4 0520 	rsb	r5, r4, #32
   8116c:	fa00 f305 	lsl.w	r3, r0, r5
   81170:	fa20 f004 	lsr.w	r0, r0, r4
   81174:	fa01 f205 	lsl.w	r2, r1, r5
   81178:	ea40 0002 	orr.w	r0, r0, r2
   8117c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81180:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81184:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81188:	fa21 f604 	lsr.w	r6, r1, r4
   8118c:	eb42 0106 	adc.w	r1, r2, r6
   81190:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81194:	bf08      	it	eq
   81196:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8119a:	bd70      	pop	{r4, r5, r6, pc}
   8119c:	f1c4 040c 	rsb	r4, r4, #12
   811a0:	f1c4 0520 	rsb	r5, r4, #32
   811a4:	fa00 f304 	lsl.w	r3, r0, r4
   811a8:	fa20 f005 	lsr.w	r0, r0, r5
   811ac:	fa01 f204 	lsl.w	r2, r1, r4
   811b0:	ea40 0002 	orr.w	r0, r0, r2
   811b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   811b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   811bc:	f141 0100 	adc.w	r1, r1, #0
   811c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811c4:	bf08      	it	eq
   811c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   811ca:	bd70      	pop	{r4, r5, r6, pc}
   811cc:	f1c4 0520 	rsb	r5, r4, #32
   811d0:	fa00 f205 	lsl.w	r2, r0, r5
   811d4:	ea4e 0e02 	orr.w	lr, lr, r2
   811d8:	fa20 f304 	lsr.w	r3, r0, r4
   811dc:	fa01 f205 	lsl.w	r2, r1, r5
   811e0:	ea43 0302 	orr.w	r3, r3, r2
   811e4:	fa21 f004 	lsr.w	r0, r1, r4
   811e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   811ec:	fa21 f204 	lsr.w	r2, r1, r4
   811f0:	ea20 0002 	bic.w	r0, r0, r2
   811f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   811f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811fc:	bf08      	it	eq
   811fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81202:	bd70      	pop	{r4, r5, r6, pc}
   81204:	f094 0f00 	teq	r4, #0
   81208:	d10f      	bne.n	8122a <__aeabi_dmul+0x1c2>
   8120a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8120e:	0040      	lsls	r0, r0, #1
   81210:	eb41 0101 	adc.w	r1, r1, r1
   81214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81218:	bf08      	it	eq
   8121a:	3c01      	subeq	r4, #1
   8121c:	d0f7      	beq.n	8120e <__aeabi_dmul+0x1a6>
   8121e:	ea41 0106 	orr.w	r1, r1, r6
   81222:	f095 0f00 	teq	r5, #0
   81226:	bf18      	it	ne
   81228:	4770      	bxne	lr
   8122a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8122e:	0052      	lsls	r2, r2, #1
   81230:	eb43 0303 	adc.w	r3, r3, r3
   81234:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81238:	bf08      	it	eq
   8123a:	3d01      	subeq	r5, #1
   8123c:	d0f7      	beq.n	8122e <__aeabi_dmul+0x1c6>
   8123e:	ea43 0306 	orr.w	r3, r3, r6
   81242:	4770      	bx	lr
   81244:	ea94 0f0c 	teq	r4, ip
   81248:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8124c:	bf18      	it	ne
   8124e:	ea95 0f0c 	teqne	r5, ip
   81252:	d00c      	beq.n	8126e <__aeabi_dmul+0x206>
   81254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81258:	bf18      	it	ne
   8125a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8125e:	d1d1      	bne.n	81204 <__aeabi_dmul+0x19c>
   81260:	ea81 0103 	eor.w	r1, r1, r3
   81264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81268:	f04f 0000 	mov.w	r0, #0
   8126c:	bd70      	pop	{r4, r5, r6, pc}
   8126e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81272:	bf06      	itte	eq
   81274:	4610      	moveq	r0, r2
   81276:	4619      	moveq	r1, r3
   81278:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8127c:	d019      	beq.n	812b2 <__aeabi_dmul+0x24a>
   8127e:	ea94 0f0c 	teq	r4, ip
   81282:	d102      	bne.n	8128a <__aeabi_dmul+0x222>
   81284:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81288:	d113      	bne.n	812b2 <__aeabi_dmul+0x24a>
   8128a:	ea95 0f0c 	teq	r5, ip
   8128e:	d105      	bne.n	8129c <__aeabi_dmul+0x234>
   81290:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81294:	bf1c      	itt	ne
   81296:	4610      	movne	r0, r2
   81298:	4619      	movne	r1, r3
   8129a:	d10a      	bne.n	812b2 <__aeabi_dmul+0x24a>
   8129c:	ea81 0103 	eor.w	r1, r1, r3
   812a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   812a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   812ac:	f04f 0000 	mov.w	r0, #0
   812b0:	bd70      	pop	{r4, r5, r6, pc}
   812b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   812b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   812ba:	bd70      	pop	{r4, r5, r6, pc}

000812bc <__aeabi_ddiv>:
   812bc:	b570      	push	{r4, r5, r6, lr}
   812be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812ca:	bf1d      	ittte	ne
   812cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812d0:	ea94 0f0c 	teqne	r4, ip
   812d4:	ea95 0f0c 	teqne	r5, ip
   812d8:	f000 f8a7 	bleq	8142a <__aeabi_ddiv+0x16e>
   812dc:	eba4 0405 	sub.w	r4, r4, r5
   812e0:	ea81 0e03 	eor.w	lr, r1, r3
   812e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   812e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   812ec:	f000 8088 	beq.w	81400 <__aeabi_ddiv+0x144>
   812f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   812f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   812f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   812fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81300:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81304:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81308:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8130c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81310:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81314:	429d      	cmp	r5, r3
   81316:	bf08      	it	eq
   81318:	4296      	cmpeq	r6, r2
   8131a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8131e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81322:	d202      	bcs.n	8132a <__aeabi_ddiv+0x6e>
   81324:	085b      	lsrs	r3, r3, #1
   81326:	ea4f 0232 	mov.w	r2, r2, rrx
   8132a:	1ab6      	subs	r6, r6, r2
   8132c:	eb65 0503 	sbc.w	r5, r5, r3
   81330:	085b      	lsrs	r3, r3, #1
   81332:	ea4f 0232 	mov.w	r2, r2, rrx
   81336:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8133a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8133e:	ebb6 0e02 	subs.w	lr, r6, r2
   81342:	eb75 0e03 	sbcs.w	lr, r5, r3
   81346:	bf22      	ittt	cs
   81348:	1ab6      	subcs	r6, r6, r2
   8134a:	4675      	movcs	r5, lr
   8134c:	ea40 000c 	orrcs.w	r0, r0, ip
   81350:	085b      	lsrs	r3, r3, #1
   81352:	ea4f 0232 	mov.w	r2, r2, rrx
   81356:	ebb6 0e02 	subs.w	lr, r6, r2
   8135a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8135e:	bf22      	ittt	cs
   81360:	1ab6      	subcs	r6, r6, r2
   81362:	4675      	movcs	r5, lr
   81364:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81368:	085b      	lsrs	r3, r3, #1
   8136a:	ea4f 0232 	mov.w	r2, r2, rrx
   8136e:	ebb6 0e02 	subs.w	lr, r6, r2
   81372:	eb75 0e03 	sbcs.w	lr, r5, r3
   81376:	bf22      	ittt	cs
   81378:	1ab6      	subcs	r6, r6, r2
   8137a:	4675      	movcs	r5, lr
   8137c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81380:	085b      	lsrs	r3, r3, #1
   81382:	ea4f 0232 	mov.w	r2, r2, rrx
   81386:	ebb6 0e02 	subs.w	lr, r6, r2
   8138a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8138e:	bf22      	ittt	cs
   81390:	1ab6      	subcs	r6, r6, r2
   81392:	4675      	movcs	r5, lr
   81394:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81398:	ea55 0e06 	orrs.w	lr, r5, r6
   8139c:	d018      	beq.n	813d0 <__aeabi_ddiv+0x114>
   8139e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   813a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   813a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   813aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   813ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   813b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   813b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   813ba:	d1c0      	bne.n	8133e <__aeabi_ddiv+0x82>
   813bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813c0:	d10b      	bne.n	813da <__aeabi_ddiv+0x11e>
   813c2:	ea41 0100 	orr.w	r1, r1, r0
   813c6:	f04f 0000 	mov.w	r0, #0
   813ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   813ce:	e7b6      	b.n	8133e <__aeabi_ddiv+0x82>
   813d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813d4:	bf04      	itt	eq
   813d6:	4301      	orreq	r1, r0
   813d8:	2000      	moveq	r0, #0
   813da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   813de:	bf88      	it	hi
   813e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   813e4:	f63f aeaf 	bhi.w	81146 <__aeabi_dmul+0xde>
   813e8:	ebb5 0c03 	subs.w	ip, r5, r3
   813ec:	bf04      	itt	eq
   813ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   813f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   813f6:	f150 0000 	adcs.w	r0, r0, #0
   813fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813fe:	bd70      	pop	{r4, r5, r6, pc}
   81400:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81404:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81408:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8140c:	bfc2      	ittt	gt
   8140e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81412:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81416:	bd70      	popgt	{r4, r5, r6, pc}
   81418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8141c:	f04f 0e00 	mov.w	lr, #0
   81420:	3c01      	subs	r4, #1
   81422:	e690      	b.n	81146 <__aeabi_dmul+0xde>
   81424:	ea45 0e06 	orr.w	lr, r5, r6
   81428:	e68d      	b.n	81146 <__aeabi_dmul+0xde>
   8142a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8142e:	ea94 0f0c 	teq	r4, ip
   81432:	bf08      	it	eq
   81434:	ea95 0f0c 	teqeq	r5, ip
   81438:	f43f af3b 	beq.w	812b2 <__aeabi_dmul+0x24a>
   8143c:	ea94 0f0c 	teq	r4, ip
   81440:	d10a      	bne.n	81458 <__aeabi_ddiv+0x19c>
   81442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81446:	f47f af34 	bne.w	812b2 <__aeabi_dmul+0x24a>
   8144a:	ea95 0f0c 	teq	r5, ip
   8144e:	f47f af25 	bne.w	8129c <__aeabi_dmul+0x234>
   81452:	4610      	mov	r0, r2
   81454:	4619      	mov	r1, r3
   81456:	e72c      	b.n	812b2 <__aeabi_dmul+0x24a>
   81458:	ea95 0f0c 	teq	r5, ip
   8145c:	d106      	bne.n	8146c <__aeabi_ddiv+0x1b0>
   8145e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81462:	f43f aefd 	beq.w	81260 <__aeabi_dmul+0x1f8>
   81466:	4610      	mov	r0, r2
   81468:	4619      	mov	r1, r3
   8146a:	e722      	b.n	812b2 <__aeabi_dmul+0x24a>
   8146c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81470:	bf18      	it	ne
   81472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81476:	f47f aec5 	bne.w	81204 <__aeabi_dmul+0x19c>
   8147a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8147e:	f47f af0d 	bne.w	8129c <__aeabi_dmul+0x234>
   81482:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81486:	f47f aeeb 	bne.w	81260 <__aeabi_dmul+0x1f8>
   8148a:	e712      	b.n	812b2 <__aeabi_dmul+0x24a>

0008148c <__aeabi_d2uiz>:
   8148c:	004a      	lsls	r2, r1, #1
   8148e:	d211      	bcs.n	814b4 <__aeabi_d2uiz+0x28>
   81490:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81494:	d211      	bcs.n	814ba <__aeabi_d2uiz+0x2e>
   81496:	d50d      	bpl.n	814b4 <__aeabi_d2uiz+0x28>
   81498:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8149c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   814a0:	d40e      	bmi.n	814c0 <__aeabi_d2uiz+0x34>
   814a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   814a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   814aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   814ae:	fa23 f002 	lsr.w	r0, r3, r2
   814b2:	4770      	bx	lr
   814b4:	f04f 0000 	mov.w	r0, #0
   814b8:	4770      	bx	lr
   814ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   814be:	d102      	bne.n	814c6 <__aeabi_d2uiz+0x3a>
   814c0:	f04f 30ff 	mov.w	r0, #4294967295
   814c4:	4770      	bx	lr
   814c6:	f04f 0000 	mov.w	r0, #0
   814ca:	4770      	bx	lr

000814cc <__aeabi_frsub>:
   814cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   814d0:	e002      	b.n	814d8 <__addsf3>
   814d2:	bf00      	nop

000814d4 <__aeabi_fsub>:
   814d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000814d8 <__addsf3>:
   814d8:	0042      	lsls	r2, r0, #1
   814da:	bf1f      	itttt	ne
   814dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   814e0:	ea92 0f03 	teqne	r2, r3
   814e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   814e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   814ec:	d06a      	beq.n	815c4 <__addsf3+0xec>
   814ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
   814f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   814f6:	bfc1      	itttt	gt
   814f8:	18d2      	addgt	r2, r2, r3
   814fa:	4041      	eorgt	r1, r0
   814fc:	4048      	eorgt	r0, r1
   814fe:	4041      	eorgt	r1, r0
   81500:	bfb8      	it	lt
   81502:	425b      	neglt	r3, r3
   81504:	2b19      	cmp	r3, #25
   81506:	bf88      	it	hi
   81508:	4770      	bxhi	lr
   8150a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8150e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81512:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81516:	bf18      	it	ne
   81518:	4240      	negne	r0, r0
   8151a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8151e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81522:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81526:	bf18      	it	ne
   81528:	4249      	negne	r1, r1
   8152a:	ea92 0f03 	teq	r2, r3
   8152e:	d03f      	beq.n	815b0 <__addsf3+0xd8>
   81530:	f1a2 0201 	sub.w	r2, r2, #1
   81534:	fa41 fc03 	asr.w	ip, r1, r3
   81538:	eb10 000c 	adds.w	r0, r0, ip
   8153c:	f1c3 0320 	rsb	r3, r3, #32
   81540:	fa01 f103 	lsl.w	r1, r1, r3
   81544:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81548:	d502      	bpl.n	81550 <__addsf3+0x78>
   8154a:	4249      	negs	r1, r1
   8154c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81550:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81554:	d313      	bcc.n	8157e <__addsf3+0xa6>
   81556:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8155a:	d306      	bcc.n	8156a <__addsf3+0x92>
   8155c:	0840      	lsrs	r0, r0, #1
   8155e:	ea4f 0131 	mov.w	r1, r1, rrx
   81562:	f102 0201 	add.w	r2, r2, #1
   81566:	2afe      	cmp	r2, #254	; 0xfe
   81568:	d251      	bcs.n	8160e <__addsf3+0x136>
   8156a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8156e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81572:	bf08      	it	eq
   81574:	f020 0001 	biceq.w	r0, r0, #1
   81578:	ea40 0003 	orr.w	r0, r0, r3
   8157c:	4770      	bx	lr
   8157e:	0049      	lsls	r1, r1, #1
   81580:	eb40 0000 	adc.w	r0, r0, r0
   81584:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81588:	f1a2 0201 	sub.w	r2, r2, #1
   8158c:	d1ed      	bne.n	8156a <__addsf3+0x92>
   8158e:	fab0 fc80 	clz	ip, r0
   81592:	f1ac 0c08 	sub.w	ip, ip, #8
   81596:	ebb2 020c 	subs.w	r2, r2, ip
   8159a:	fa00 f00c 	lsl.w	r0, r0, ip
   8159e:	bfaa      	itet	ge
   815a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   815a4:	4252      	neglt	r2, r2
   815a6:	4318      	orrge	r0, r3
   815a8:	bfbc      	itt	lt
   815aa:	40d0      	lsrlt	r0, r2
   815ac:	4318      	orrlt	r0, r3
   815ae:	4770      	bx	lr
   815b0:	f092 0f00 	teq	r2, #0
   815b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   815b8:	bf06      	itte	eq
   815ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   815be:	3201      	addeq	r2, #1
   815c0:	3b01      	subne	r3, #1
   815c2:	e7b5      	b.n	81530 <__addsf3+0x58>
   815c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   815c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   815cc:	bf18      	it	ne
   815ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   815d2:	d021      	beq.n	81618 <__addsf3+0x140>
   815d4:	ea92 0f03 	teq	r2, r3
   815d8:	d004      	beq.n	815e4 <__addsf3+0x10c>
   815da:	f092 0f00 	teq	r2, #0
   815de:	bf08      	it	eq
   815e0:	4608      	moveq	r0, r1
   815e2:	4770      	bx	lr
   815e4:	ea90 0f01 	teq	r0, r1
   815e8:	bf1c      	itt	ne
   815ea:	2000      	movne	r0, #0
   815ec:	4770      	bxne	lr
   815ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   815f2:	d104      	bne.n	815fe <__addsf3+0x126>
   815f4:	0040      	lsls	r0, r0, #1
   815f6:	bf28      	it	cs
   815f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   815fc:	4770      	bx	lr
   815fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81602:	bf3c      	itt	cc
   81604:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81608:	4770      	bxcc	lr
   8160a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8160e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81612:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81616:	4770      	bx	lr
   81618:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8161c:	bf16      	itet	ne
   8161e:	4608      	movne	r0, r1
   81620:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81624:	4601      	movne	r1, r0
   81626:	0242      	lsls	r2, r0, #9
   81628:	bf06      	itte	eq
   8162a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8162e:	ea90 0f01 	teqeq	r0, r1
   81632:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81636:	4770      	bx	lr

00081638 <__aeabi_ui2f>:
   81638:	f04f 0300 	mov.w	r3, #0
   8163c:	e004      	b.n	81648 <__aeabi_i2f+0x8>
   8163e:	bf00      	nop

00081640 <__aeabi_i2f>:
   81640:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81644:	bf48      	it	mi
   81646:	4240      	negmi	r0, r0
   81648:	ea5f 0c00 	movs.w	ip, r0
   8164c:	bf08      	it	eq
   8164e:	4770      	bxeq	lr
   81650:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81654:	4601      	mov	r1, r0
   81656:	f04f 0000 	mov.w	r0, #0
   8165a:	e01c      	b.n	81696 <__aeabi_l2f+0x2a>

0008165c <__aeabi_ul2f>:
   8165c:	ea50 0201 	orrs.w	r2, r0, r1
   81660:	bf08      	it	eq
   81662:	4770      	bxeq	lr
   81664:	f04f 0300 	mov.w	r3, #0
   81668:	e00a      	b.n	81680 <__aeabi_l2f+0x14>
   8166a:	bf00      	nop

0008166c <__aeabi_l2f>:
   8166c:	ea50 0201 	orrs.w	r2, r0, r1
   81670:	bf08      	it	eq
   81672:	4770      	bxeq	lr
   81674:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81678:	d502      	bpl.n	81680 <__aeabi_l2f+0x14>
   8167a:	4240      	negs	r0, r0
   8167c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81680:	ea5f 0c01 	movs.w	ip, r1
   81684:	bf02      	ittt	eq
   81686:	4684      	moveq	ip, r0
   81688:	4601      	moveq	r1, r0
   8168a:	2000      	moveq	r0, #0
   8168c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81690:	bf08      	it	eq
   81692:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81696:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8169a:	fabc f28c 	clz	r2, ip
   8169e:	3a08      	subs	r2, #8
   816a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   816a4:	db10      	blt.n	816c8 <__aeabi_l2f+0x5c>
   816a6:	fa01 fc02 	lsl.w	ip, r1, r2
   816aa:	4463      	add	r3, ip
   816ac:	fa00 fc02 	lsl.w	ip, r0, r2
   816b0:	f1c2 0220 	rsb	r2, r2, #32
   816b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   816b8:	fa20 f202 	lsr.w	r2, r0, r2
   816bc:	eb43 0002 	adc.w	r0, r3, r2
   816c0:	bf08      	it	eq
   816c2:	f020 0001 	biceq.w	r0, r0, #1
   816c6:	4770      	bx	lr
   816c8:	f102 0220 	add.w	r2, r2, #32
   816cc:	fa01 fc02 	lsl.w	ip, r1, r2
   816d0:	f1c2 0220 	rsb	r2, r2, #32
   816d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   816d8:	fa21 f202 	lsr.w	r2, r1, r2
   816dc:	eb43 0002 	adc.w	r0, r3, r2
   816e0:	bf08      	it	eq
   816e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   816e6:	4770      	bx	lr

000816e8 <__aeabi_f2iz>:
   816e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   816ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   816f0:	d30f      	bcc.n	81712 <__aeabi_f2iz+0x2a>
   816f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   816f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   816fa:	d90d      	bls.n	81718 <__aeabi_f2iz+0x30>
   816fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81704:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81708:	fa23 f002 	lsr.w	r0, r3, r2
   8170c:	bf18      	it	ne
   8170e:	4240      	negne	r0, r0
   81710:	4770      	bx	lr
   81712:	f04f 0000 	mov.w	r0, #0
   81716:	4770      	bx	lr
   81718:	f112 0f61 	cmn.w	r2, #97	; 0x61
   8171c:	d101      	bne.n	81722 <__aeabi_f2iz+0x3a>
   8171e:	0242      	lsls	r2, r0, #9
   81720:	d105      	bne.n	8172e <__aeabi_f2iz+0x46>
   81722:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81726:	bf08      	it	eq
   81728:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8172c:	4770      	bx	lr
   8172e:	f04f 0000 	mov.w	r0, #0
   81732:	4770      	bx	lr

00081734 <__aeabi_f2uiz>:
   81734:	0042      	lsls	r2, r0, #1
   81736:	d20e      	bcs.n	81756 <__aeabi_f2uiz+0x22>
   81738:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8173c:	d30b      	bcc.n	81756 <__aeabi_f2uiz+0x22>
   8173e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81746:	d409      	bmi.n	8175c <__aeabi_f2uiz+0x28>
   81748:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8174c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81750:	fa23 f002 	lsr.w	r0, r3, r2
   81754:	4770      	bx	lr
   81756:	f04f 0000 	mov.w	r0, #0
   8175a:	4770      	bx	lr
   8175c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81760:	d101      	bne.n	81766 <__aeabi_f2uiz+0x32>
   81762:	0242      	lsls	r2, r0, #9
   81764:	d102      	bne.n	8176c <__aeabi_f2uiz+0x38>
   81766:	f04f 30ff 	mov.w	r0, #4294967295
   8176a:	4770      	bx	lr
   8176c:	f04f 0000 	mov.w	r0, #0
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <__libc_init_array>:
   81774:	b570      	push	{r4, r5, r6, lr}
   81776:	4e0f      	ldr	r6, [pc, #60]	; (817b4 <__libc_init_array+0x40>)
   81778:	4d0f      	ldr	r5, [pc, #60]	; (817b8 <__libc_init_array+0x44>)
   8177a:	1b76      	subs	r6, r6, r5
   8177c:	10b6      	asrs	r6, r6, #2
   8177e:	bf18      	it	ne
   81780:	2400      	movne	r4, #0
   81782:	d005      	beq.n	81790 <__libc_init_array+0x1c>
   81784:	3401      	adds	r4, #1
   81786:	f855 3b04 	ldr.w	r3, [r5], #4
   8178a:	4798      	blx	r3
   8178c:	42a6      	cmp	r6, r4
   8178e:	d1f9      	bne.n	81784 <__libc_init_array+0x10>
   81790:	4e0a      	ldr	r6, [pc, #40]	; (817bc <__libc_init_array+0x48>)
   81792:	4d0b      	ldr	r5, [pc, #44]	; (817c0 <__libc_init_array+0x4c>)
   81794:	f000 f8b0 	bl	818f8 <_init>
   81798:	1b76      	subs	r6, r6, r5
   8179a:	10b6      	asrs	r6, r6, #2
   8179c:	bf18      	it	ne
   8179e:	2400      	movne	r4, #0
   817a0:	d006      	beq.n	817b0 <__libc_init_array+0x3c>
   817a2:	3401      	adds	r4, #1
   817a4:	f855 3b04 	ldr.w	r3, [r5], #4
   817a8:	4798      	blx	r3
   817aa:	42a6      	cmp	r6, r4
   817ac:	d1f9      	bne.n	817a2 <__libc_init_array+0x2e>
   817ae:	bd70      	pop	{r4, r5, r6, pc}
   817b0:	bd70      	pop	{r4, r5, r6, pc}
   817b2:	bf00      	nop
   817b4:	00081904 	.word	0x00081904
   817b8:	00081904 	.word	0x00081904
   817bc:	0008190c 	.word	0x0008190c
   817c0:	00081904 	.word	0x00081904

000817c4 <register_fini>:
   817c4:	4b02      	ldr	r3, [pc, #8]	; (817d0 <register_fini+0xc>)
   817c6:	b113      	cbz	r3, 817ce <register_fini+0xa>
   817c8:	4802      	ldr	r0, [pc, #8]	; (817d4 <register_fini+0x10>)
   817ca:	f000 b805 	b.w	817d8 <atexit>
   817ce:	4770      	bx	lr
   817d0:	00000000 	.word	0x00000000
   817d4:	000817e5 	.word	0x000817e5

000817d8 <atexit>:
   817d8:	2300      	movs	r3, #0
   817da:	4601      	mov	r1, r0
   817dc:	461a      	mov	r2, r3
   817de:	4618      	mov	r0, r3
   817e0:	f000 b814 	b.w	8180c <__register_exitproc>

000817e4 <__libc_fini_array>:
   817e4:	b538      	push	{r3, r4, r5, lr}
   817e6:	4d07      	ldr	r5, [pc, #28]	; (81804 <__libc_fini_array+0x20>)
   817e8:	4c07      	ldr	r4, [pc, #28]	; (81808 <__libc_fini_array+0x24>)
   817ea:	1b2c      	subs	r4, r5, r4
   817ec:	10a4      	asrs	r4, r4, #2
   817ee:	d005      	beq.n	817fc <__libc_fini_array+0x18>
   817f0:	3c01      	subs	r4, #1
   817f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   817f6:	4798      	blx	r3
   817f8:	2c00      	cmp	r4, #0
   817fa:	d1f9      	bne.n	817f0 <__libc_fini_array+0xc>
   817fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81800:	f000 b884 	b.w	8190c <_fini>
   81804:	0008191c 	.word	0x0008191c
   81808:	00081918 	.word	0x00081918

0008180c <__register_exitproc>:
   8180c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81810:	4c25      	ldr	r4, [pc, #148]	; (818a8 <__register_exitproc+0x9c>)
   81812:	4606      	mov	r6, r0
   81814:	6825      	ldr	r5, [r4, #0]
   81816:	4688      	mov	r8, r1
   81818:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   8181c:	4692      	mov	sl, r2
   8181e:	4699      	mov	r9, r3
   81820:	b3c4      	cbz	r4, 81894 <__register_exitproc+0x88>
   81822:	6860      	ldr	r0, [r4, #4]
   81824:	281f      	cmp	r0, #31
   81826:	dc17      	bgt.n	81858 <__register_exitproc+0x4c>
   81828:	1c41      	adds	r1, r0, #1
   8182a:	b176      	cbz	r6, 8184a <__register_exitproc+0x3e>
   8182c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   81830:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   81834:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   81838:	2201      	movs	r2, #1
   8183a:	4082      	lsls	r2, r0
   8183c:	4315      	orrs	r5, r2
   8183e:	2e02      	cmp	r6, #2
   81840:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   81844:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   81848:	d01e      	beq.n	81888 <__register_exitproc+0x7c>
   8184a:	1c83      	adds	r3, r0, #2
   8184c:	6061      	str	r1, [r4, #4]
   8184e:	2000      	movs	r0, #0
   81850:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   81854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81858:	4b14      	ldr	r3, [pc, #80]	; (818ac <__register_exitproc+0xa0>)
   8185a:	b303      	cbz	r3, 8189e <__register_exitproc+0x92>
   8185c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81860:	f3af 8000 	nop.w
   81864:	4604      	mov	r4, r0
   81866:	b1d0      	cbz	r0, 8189e <__register_exitproc+0x92>
   81868:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   8186c:	2700      	movs	r7, #0
   8186e:	e884 0088 	stmia.w	r4, {r3, r7}
   81872:	4638      	mov	r0, r7
   81874:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81878:	2101      	movs	r1, #1
   8187a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8187e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   81882:	2e00      	cmp	r6, #0
   81884:	d0e1      	beq.n	8184a <__register_exitproc+0x3e>
   81886:	e7d1      	b.n	8182c <__register_exitproc+0x20>
   81888:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8188c:	431a      	orrs	r2, r3
   8188e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   81892:	e7da      	b.n	8184a <__register_exitproc+0x3e>
   81894:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   81898:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8189c:	e7c1      	b.n	81822 <__register_exitproc+0x16>
   8189e:	f04f 30ff 	mov.w	r0, #4294967295
   818a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   818a6:	bf00      	nop
   818a8:	000818f4 	.word	0x000818f4
   818ac:	00000000 	.word	0x00000000

000818b0 <a3>:
   818b0:	ffffffff ffffc396 ffff9b7c ffffafa4     ........|.......
   818c0:	ffffbd57 ffffe667 fffff524 00000000     W...g...$.......

000818d0 <b3>:
   818d0:	000000b4 00000000 fffffde2 00000000     ................
   818e0:	0000021e 00000000 ffffff4c 00000000     ........L.......
   818f0:	00000043                                C...

000818f4 <_global_impure_ptr>:
   818f4:	20070008                                ... 

000818f8 <_init>:
   818f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   818fa:	bf00      	nop
   818fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   818fe:	bc08      	pop	{r3}
   81900:	469e      	mov	lr, r3
   81902:	4770      	bx	lr

00081904 <__init_array_start>:
   81904:	000817c5 	.word	0x000817c5

00081908 <__frame_dummy_init_array_entry>:
   81908:	00080119                                ....

0008190c <_fini>:
   8190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8190e:	bf00      	nop
   81910:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81912:	bc08      	pop	{r3}
   81914:	469e      	mov	lr, r3
   81916:	4770      	bx	lr

00081918 <__fini_array_start>:
   81918:	000800f5 	.word	0x000800f5
